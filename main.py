import re
from aiogram import Bot, Dispatcher, dispatcher, executor, types
import datetime
import pandas as pd
from aiogram.dispatcher.filters import Text
import asyncio
import numpy as np
import lib  # –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
from system.dbc import getSQLSettings  # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ SQL
from itertools import groupby

global log_group
log_group = '$$$$$$$'  # –≥—Ä—É–ø–ø–∞, –∫—É–¥–∞ –±–æ—Ç –æ—Ç—Å—ã–ª–∞–µ—Ç —á–∞—Å—Ç—å –ª–æ–≥–æ–≤
print('WOrked')
u_f = lib.Query.getRecordsByQuery('fli', f'id != 0')  # –∑–∞–±–∏—Ä–∞–µ—Ç –≤—Å–µ —É–≤–ª–µ—á–µ–Ω–∏—è
global u_fl
u_fl = pd.DataFrame(u_f)
c_f = lib.Query.getRecordsByQuery('c', f'id != 0')  # –∑–∞–±–∏—Ä–∞–µ—Ç –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
global c
c = pd.DataFrame(c_f)

bot = Bot(f"{str(c.at[1, 'chat_id'])}")  # –µ—Å–ª–∏ 2, —Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π
dp = Dispatcher(bot)

contact_f = lib.Query.getRecordsByQuery('bdci', f'id != 0')  # –∑–∞–±–∏—Ä–∞–µ—Ç –≤—Å–µ —Ü–µ–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
global contact_b
contact_b = pd.DataFrame(contact_f)

deal_f = lib.Query.getRecordsByQuery('bdi', f'id != 0')  # –∑–∞–±–∏—Ä–∞–µ—Ç –≤—Å–µ —á–µ–º –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è —á–µ–ª–æ–≤–µ–∫
global deal_b
deal_b = pd.DataFrame(deal_f)

sector_f = lib.Query.getRecordsByQuery('bsi', f'id != 0')  # –∑–∞–±–∏—Ä–∞–µ—Ç –≤—Å–µ –∏–∑ –∫–∞–∫–æ–≥–æ —Å–µ–∫—Ç–æ—Ä–∞
global sector_b
sector_b = pd.DataFrame(sector_f)


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def get_keyboard_u_group(id):
    buttons = [
        types.InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º", callback_data=f"num_sendEveryone_*{str(id)}"),
        types.InlineKeyboardButton(text="–ü–æ –¥—Ä—É–∂–±–µ", callback_data=f"num_sendFriends_*{str(id)}"),
        types.InlineKeyboardButton(text="–ü–æ –±–∏–∑–Ω–µ—Å—É", callback_data=f"num_sendBusiness_*{str(id)}")
    ]
    keyboard_u_group = types.InlineKeyboardMarkup()
    keyboard_u_group.add(*buttons)
    return keyboard_u_group


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä –ø–æ–ª–∞
def get_keyboard_gender(id):
    buttons = [
        types.InlineKeyboardButton(text="–Ø - –º—É–∂—á–∏–Ω–∞ üë¶", callback_data=f"num_gender_{str(id)}_1"),
        types.InlineKeyboardButton(text="–Ø - –∂–µ–Ω—â–∏–Ω–∞ üëß", callback_data=f"num_gender_{str(id)}_0")
    ]
    keyboard_ban = types.InlineKeyboardMarkup()
    keyboard_ban.add(*buttons)
    return keyboard_ban


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞
def get_keyboard_sity(id, step):
    buttons = [
        # –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–æ–≤
    ]
    keyboard_ban = types.InlineKeyboardMarkup()
    keyboard_ban.add(*buttons)
    return keyboard_ban


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —è–∑—ã–∫
def get_keyboard_lang(id, step):
    t = lib.Query.getRecordsByQuery('u_lang_id', f'ei = {id}')
    te = lib.Query.getRecordsByQuery('u_lang', f'id != 10')
    keyboard_lang = types.InlineKeyboardMarkup(row_width=2)
    row_btns = []
    for el in te:
        er = 0
        for x in t:
            if x['lang_id'] == el['id']:
                er = 1
        if er == 1:
            row_btns.append(
                types.InlineKeyboardButton(text=f"‚úÖ{el['name']}", callback_data=f"num_lang_{id}_{el['id']}_1_{step}"))
        else:
            row_btns.append(
                types.InlineKeyboardButton(text=f"{el['name']}", callback_data=f"num_lang_{id}_{el['id']}_0_{step}"))
    keyboard_lang.add(*row_btns)
    return keyboard_lang


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ–¥–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_keyboard_year(id, step):
    markup = types.InlineKeyboardMarkup(row_width=5)
    te = [i for i in range(1960, 2010)]
    row_btns = [types.InlineKeyboardButton(text=f'{i}', callback_data=f'num_gen-year_{id}_{i}_{step}') for i in te]
    markup.add(*row_btns)
    return markup


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_keyboard_mounth(id, year, step):
    markup = types.InlineKeyboardMarkup(row_width=3)
    buttons = [
        types.InlineKeyboardButton(text="–Ø–Ω–≤–∞—Ä—å", callback_data=f"num_gen-mounth_{id}_{year}_1_{step}")
        , types.InlineKeyboardButton(text="–§–µ–≤—Ä–∞–ª—å", callback_data=f"num_gen-mounth_{id}_{year}_2_{step}")
        , types.InlineKeyboardButton(text="–ú–∞—Ä—Ç", callback_data=f"num_gen-mounth_{id}_{year}_3_{step}")
        , types.InlineKeyboardButton(text="–ê–ø—Ä–µ–ª—å", callback_data=f"num_gen-mounth_{id}_{year}_4_{step}")
        , types.InlineKeyboardButton(text="–ú–∞–π", callback_data=f"num_gen-mounth_{id}_{year}_5_{step}")
        , types.InlineKeyboardButton(text="–ò—é–Ω—å", callback_data=f"num_gen-mounth_{id}_{year}_6_{step}")
        , types.InlineKeyboardButton(text="–ò—é–ª—å", callback_data=f"num_gen-mounth_{id}_{year}_7_{step}")
        , types.InlineKeyboardButton(text="–ê–≤–≥—É—Å—Ç", callback_data=f"num_gen-mounth_{id}_{year}_8_{step}")
        , types.InlineKeyboardButton(text="–°–µ–Ω—Ç—è–±—Ä—å", callback_data=f"num_gen-mounth_{id}_{year}_9_{step}")
        , types.InlineKeyboardButton(text="–û–∫—Ç—è–±—Ä—å", callback_data=f"num_gen-mounth_{id}_{year}_10_{step}")
        , types.InlineKeyboardButton(text="–ù–æ—è–±—Ä—å", callback_data=f"num_gen-mounth_{id}_{year}_11_{step}")
        , types.InlineKeyboardButton(text="–î–µ–∫–∞–±—Ä—å", callback_data=f"num_gen-mounth_{id}_{year}_12_{step}")
    ]
    markup.add(*buttons)
    return markup


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_keyboard_day(id, year, mounth, step):
    markup = types.InlineKeyboardMarkup(row_width=5)
    te = [i for i in range(1, 32)]
    row_btns = [types.InlineKeyboardButton(text=f'{i}', callback_data=f'num_gen-day_{id}_{year}_{mounth}_{i}_{step}')
                for i in te]
    markup.add(*row_btns)
    return markup


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä —Ü–µ–ª–∏ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞
def get_keyboard_choose(id):
    # keyboard_choose = types.InlineKeyboardMarkup()
    buttons = [
        types.InlineKeyboardButton(text="–ù–∞–π—Ç–∏ –¥—Ä—É–∑–µ–π üö¥‚Äç‚ôÇÔ∏è", callback_data=f"num_choose_{str(id)}_0"),
        types.InlineKeyboardButton(text="–†–∞—Å—à–∏—Ä–∏—Ç—å —Å–µ—Ç—å –¥–µ–ª–æ–≤—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ üí∂", callback_data=f"num_choose_{str(id)}_1")
    ]
    keyboard_choose = types.InlineKeyboardMarkup(row_width=1)
    keyboard_choose.add(*buttons)
    return keyboard_choose


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥—Ä—É–∑—å—è-–¥–æ—Å—É–≥
def get_keyboard_friends_leisure(id, act, step):
    if act == 'fl':
        t = lib.Query.getRecordsByQuery('flu', f'ei = {id}')
        tempo = 'fli'
    elif act == 'bl':
        t = lib.Query.getRecordsByQuery('blu', f'ei = {id}')
        tempo = 'leisure_id'
    te = lib.Query.getRecordsByQuery('fli', f'id != 0')
    keyboard_friends_leisure = types.InlineKeyboardMarkup(row_width=2)
    row_btns = []
    for el in te:
        er = 0
        for x in t:
            if x[f'{tempo}'] == el['id']:
                er = 1
        if er == 1:
            row_btns.append(
                types.InlineKeyboardButton(text=f"‚úÖ{el['name']}", callback_data=f"num_{act}_{id}_{el['id']}_1_{step}"))
        else:
            row_btns.append(
                types.InlineKeyboardButton(text=f"{el['name']}", callback_data=f"num_{act}_{id}_{el['id']}_0_{step}"))
    keyboard_friends_leisure.add(*row_btns)
    return keyboard_friends_leisure


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥—Ä—É–∑—å—è-–¥–æ—Å—É–≥-–¥–æ–ø
def get_keyboard_friends_leisure_plus(id, step):
    t = lib.Query.getRecordsByQuery('flu', f'ei = {id}')
    ta = lib.Query.getRecordsByQuery('flu_plus', f'ei = {id}')
    te = lib.Query.getRecordsByQuery('fli', f'id != 0')
    keyboard_friends_leisure = types.InlineKeyboardMarkup(row_width=2)
    row_btns = []
    for el in te:
        er = 0
        tem = 0
        for e in t:
            if tem != 1:
                if e['fli'] != el['id']:
                    for x in ta:
                        if el['id'] == x['fli']:
                            er = 1
                else:
                    tem = 1
                    break
        if tem != 1:
            if er == 1:
                row_btns.append(types.InlineKeyboardButton(text=f"‚úÖ{el['name']}",
                                                           callback_data=f"num_flp_{id}_{el['id']}_1_{step}"))
            else:
                row_btns.append(
                    types.InlineKeyboardButton(text=f"{el['name']}", callback_data=f"num_flp_{id}_{el['id']}_0_{step}"))
    keyboard_friends_leisure.add(*row_btns)
    return keyboard_friends_leisure


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —á–µ–º —Å–µ–π—á–∞—Å –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è
def get_keyboard_business(id, step):
    te = lib.Query.getRecordsByQuery('bdi', f'id != 0')
    keyboard_business = types.InlineKeyboardMarkup(row_width=1)
    buttons = []
    for el in te:
        buttons.append(types.InlineKeyboardButton(text=f"{el['name']}", callback_data=f"num_de_{id}_{el['id']}_{step}"))
    keyboard_business.add(*buttons)
    return keyboard_business


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ –∫–∞–∫–æ–π —Å—Ñ–µ—Ä–µ
def get_keyboard_business_sector(id, act, step):
    if act == 'sect':
        t = lib.Query.getRecordsByQuery('bsu', f'ei = {id}')
        tempo = int(lib.Query.checkCountByQuery('bsu', f'ei = {id}'))
    elif act == 'sect2':
        t = lib.Query.getRecordsByQuery('bs2u', f'ei = {id}')
        tempo = int(lib.Query.checkCountByQuery('bs2u', f'ei = {id}'))
    te = lib.Query.getRecordsByQuery('bsi', f'id != 0')
    keyboard_sector = types.InlineKeyboardMarkup(row_width=2)
    buttons = []
    for el in te:
        er = 0
        for x in t:
            if x[f'id_sector'] == el['id']:
                er = 1
        if er == 1:
            buttons.append(
                types.InlineKeyboardButton(text=f"‚úÖ{el['name']}", callback_data=f"num_{act}_{id}_{el['id']}_1_{step}"))
        else:
            buttons.append(
                types.InlineKeyboardButton(text=f"{el['name']}", callback_data=f"num_{act}_{id}_{el['id']}_0_{step}"))
    if tempo > 0:
        buttons.append(types.InlineKeyboardButton(text=f"–ì–æ—Ç–æ–≤–æ", callback_data=f"num_{act}_{id}_0_all_{step}"))
    keyboard_sector.add(*buttons)
    return keyboard_sector


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∫–∞–∫–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã
def get_keyboard_business_contact(id, step):
    t = lib.Query.getRecordsByQuery('bdcu', f'ei = {id}')
    te = lib.Query.getRecordsByQuery('bdci', f'id != 0')
    keyboard_business_cont = types.InlineKeyboardMarkup(row_width=1)
    buttons = []
    for el in te:
        er = 0
        for x in t:
            if x['id_contact'] == el['id']:
                er = 1
        if er == 1:
            buttons.append(
                types.InlineKeyboardButton(text=f"‚úÖ{el['name']}", callback_data=f"num_cont_{id}_{el['id']}_1_{step}"))
        else:
            buttons.append(
                types.InlineKeyboardButton(text=f"{el['name']}", callback_data=f"num_cont_{id}_{el['id']}_0_{step}"))
    keyboard_business_cont.add(*buttons)
    return keyboard_business_cont


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å—Å—ã–ª–∫–∏
def get_keyboard_link(id):
    buttons = [
        # —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    ]
    keyboard_link = types.InlineKeyboardMarkup(row_width=1)
    keyboard_link.add(*buttons)
    return keyboard_link


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å—Å—ã–ª–∫–∏ –≤—ã–±–æ—Ä–∞ —Å–∏—Å—Ç–µ–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
def get_keyboard_link_choose(m, id):
    buttons = [
        # –≤—ã–±–æ—Ä –ø–ª–∞—Ç—ë–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
    ]
    keyboard_link_choose = types.InlineKeyboardMarkup(row_width=2)
    keyboard_link_choose.add(*buttons)
    return keyboard_link_choose


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω—Ä–∞–≤–∏—Ç—Å—è –ª–∏ –∞–Ω–∫–µ—Ç–∞
def get_keyboard_fin(id):
    buttons = [
        types.InlineKeyboardButton(text="–ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è", callback_data=f"num_fin_{id}_0"),
        types.InlineKeyboardButton(text="–•–æ—á—É –∫–æ–µ-—á—Ç–æ –ø–æ–ø—Ä–∞–≤–∏—Ç—å", callback_data=f"num_fin_{id}_1")
    ]
    keyboard_fin = types.InlineKeyboardMarkup(row_width=1)
    keyboard_fin.add(*buttons)
    return keyboard_fin


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω—Ä–∞–≤–∏—Ç—Å—è –ª–∏ –∞–Ω–∫–µ—Ç–∞
def get_keyboard_suport(id):
    buttons = [
        types.InlineKeyboardButton(text="–£ –í–∞—Å –∫—Ä—É—Ç–∞—è –∏–¥–µ—è! –•–æ—á—É –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å", callback_data=f"num_sup_{id}_0"),
        types.InlineKeyboardButton(text="–í –¥—Ä—É–≥–æ–π —Ä–∞–∑", callback_data=f"num_sup_{id}_1")
    ]
    keyboard_sup = types.InlineKeyboardMarkup(row_width=1)
    keyboard_sup.add(*buttons)
    return keyboard_sup


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –±—ã–ª–∞ –ª–∏ –≤—Å—Ç—Ä–µ—á–∞ –≤ —Å—É–±–±–æ—Ç—É
def get_keyboard_saturday():
    buttons = [
        types.InlineKeyboardButton(text="–î–∞, –º—ã –¥–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å –æ –≤—Å—Ç—Ä–µ—á–µ", callback_data=f"num_saturday_1"),
        types.InlineKeyboardButton(text="–ù–µ—Ç, –ø–∞—Ä—Ç–Ω—ë—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç", callback_data=f"num_saturday_0")
    ]
    keyboard_saturday = types.InlineKeyboardMarkup(row_width=1)
    keyboard_saturday.add(*buttons)
    return keyboard_saturday


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –µ—Å–ª–∏ –≤—Å—Ç—Ä–µ—á–∞ –±—ã–ª–∞
def get_keyboard_feedback():
    keyboard_feedback = types.InlineKeyboardMarkup(row_width=5)
    te = [i for i in range(1, 6)]
    row_btns = [types.InlineKeyboardButton(text=f'{i}', callback_data=f'num_feedback_{i}') for i in te]
    keyboard_feedback.add(*row_btns)
    return keyboard_feedback


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø—Ä–æ–ø—É—Å–∫ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
def get_keyboard_feedback_pass(id):
    buttons = [
        types.InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"num_pass_{id}")
    ]
    keyboard_feedback_pass = types.InlineKeyboardMarkup(row_width=1)
    keyboard_feedback_pass.add(*buttons)
    return keyboard_feedback_pass


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø—Ä–æ–ø—É—Å–∫ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
def get_keyboard_want(id):
    buttons = [
        types.InlineKeyboardButton(text="–•–æ—á—É –µ—â—ë!", callback_data=f"num_want_{id}")
    ]
    keyboard_want = types.InlineKeyboardMarkup(row_width=1)
    keyboard_want.add(*buttons)
    return keyboard_want


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ö–æ—á–µ—à—å –±–æ–ª—å—à–µ –≤—Å—Ç—Ä–µ—á?
def get_keyboard_wantmore(id):
    buttons = [
        types.InlineKeyboardButton(text="–•–æ—á—É –±–æ–ª—å—à–µ –≤—Å—Ç—Ä–µ—á!", callback_data=f"num_wantmore_1_{id}")
        , types.InlineKeyboardButton(text="–ë—É–¥—É –≤—Å—Ç—Ä–µ—á–∞—Ç—å—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é", callback_data=f"num_wantmore_0_{id}")
    ]
    keyboard_wantmore = types.InlineKeyboardMarkup(row_width=1)
    keyboard_wantmore.add(*buttons)
    return keyboard_wantmore


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å—Å—ã–ª–∫–∏
def get_keyboard_link2(id):
    buttons = [
        types.InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data=f"num_link2_{id}")
    ]
    keyboard_link2 = types.InlineKeyboardMarkup(row_width=1)
    keyboard_link2.add(*buttons)
    return keyboard_link2


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ –∫–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –≤—Å—Ç—Ä–µ—á–∞
def get_keyboard_wedonline(id):
    buttons = [
        types.InlineKeyboardButton(text="–û—Ñ–ª–∞–π–Ω", callback_data=f"num_wedo_1_{id}")
        , types.InlineKeyboardButton(text="–û–Ω–ª–∞–π–Ω", callback_data=f"num_wedo_0_{id}")
    ]
    keyboard_wedonline = types.InlineKeyboardMarkup(row_width=1)
    keyboard_wedonline.add(*buttons)
    return keyboard_wedonline


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –ø—Ä–æ–µ–∫—Ç—É
def get_keyboard_new_user(id):
    buttons = [
        types.InlineKeyboardButton(text="–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –ø—Ä–æ–µ–∫—Ç—É", callback_data=f"num_new_{id}")
    ]
    keyboard_new_user = types.InlineKeyboardMarkup(row_width=1)
    keyboard_new_user.add(*buttons)
    return keyboard_new_user


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –ø—Ä–æ–µ–∫—Ç—É
def get_keyboard_cancel_fee(id):
    buttons = [
        types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data=f"num_canf_{id}")
    ]
    keyboard_cancel_fee = types.InlineKeyboardMarkup(row_width=1)
    keyboard_cancel_fee.add(*buttons)
    return keyboard_cancel_fee


async def finall_f(user_id):
    o_user = lib.Query.getRecordByQuery('u', f'ei = {user_id}')
    f_user = lib.Query.getRecordsByQuery('u_leisure', f'ei = {user_id}')
    s = ''
    for el in f_user:
        s += f"\n‚Ä¢ {el['leisure_name']}"
    f_user_plus = lib.Query.getRecordsByQuery('u_leisure_plus', f'ei = {user_id}')
    s_plus = ''
    for el in f_user_plus:
        s_plus += f"\n‚Ä¢ {el['leisure_name']}"
    cho = f"###"
    await bot.send_message(user_id,
                           f"<b>#######", reply_markup=get_keyboard_fin(user_id),
                           parse_mode=types.ParseMode.HTML)


async def finall(user_id):
    o_user = lib.Query.getRecordByQuery('u_business', f'ei = {user_id}')
    user_bc = lib.Query.getRecordsByQuery('u_business_contact', f'ei = {user_id}')
    user_bl = lib.Query.getRecordsByQuery('u_business_leisure', f'ei = {user_id}')
    user_bs = lib.Query.getRecordsByQuery('u_business_sector', f'ei = {user_id}')
    user_bs2 = lib.Query.getRecordsByQuery('u_business_sector2', f'ei = {user_id}')
    bc = ''
    for el in user_bc:
        bc += f"‚Ä¢ {el['name_contact']}\n"
    bl = ''
    for el in user_bl:
        bl += f"‚Ä¢ {el['name_leisure']}\n"
    bs = ''
    for el in user_bs:
        bs += f"‚Ä¢ {el['name_sector']}\n"
    bs2 = ''
    for el in user_bs2:
        bs2 += f"‚Ä¢ {el['name_sector']}\n"

    await bot.send_message(user_id,
                           f"############", reply_markup=get_keyboard_fin(user_id),
                           parse_mode=types.ParseMode.HTML)


@dp.callback_query_handler(dispatcher.filters.Text(startswith="num_"))
async def callbacks_num(call: types.CallbackQuery):
    action = call.data.split("_")[1]
    global u_fl
    global contact_b
    global deal_b
    global sector_b
    if action == "ban" or action == "unban":
        try:
            acti = call.data.split("*")[0]
            user_id = call.data.split("*")[1]
        except:
            await call.bot.send_message(log_group,
                                        f'{datetime.datetime.now()} : \n–û–®–ò–ë–ö–ê.–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –∫–Ω–æ–ø–∫–∏ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å/–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å')
        try:
            ttemp = lib.Query.getFieldByQuery('u', f'ei = {user_id}', 'blocked')
        except:
            await call.bot.send_message(log_group,
                                        f'{datetime.datetime.now()} : \n–û–®–ò–ë–ö–ê.–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –∫–Ω–æ–ø–∫–∏.–ø—Ä–æ—á—Ç–µ–Ω–∏–µ u_start –∏ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–Ω—É—Ç—Ä–∏ –Ω–µ—ë')
        if acti == "num_ban_":
            bl = 1
        else:
            bl = 0
        try:
            idict = {'blocked': bl}
            lib.Query.updateRecordByQuery('u', idict, f'ei = {user_id}')
            if bl == 1:
                await call.message.edit_reply_markup(reply_markup=get_keyboard_unban(user_id))
                await call.message.answer('[info] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω')
                await call.bot.send_message(log_group, f'{datetime.datetime.now()} : \n[info]'
                                                       f'–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω')
            else:
                await call.message.edit_reply_markup(reply_markup=get_keyboard_ban(user_id))
                await call.message.answer('[info] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω')
                await call.bot.send_message(log_group, f'{datetime.datetime.now()} : \n[info]'
                                                       f'–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω')
        except:
            await call.message.answer(
                '[error] –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É–∂–µ —Å–æ–æ–±—â–∏–ª —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É, –æ–Ω —Å–º–æ—Ç—Ä–∏—Ç')
            await call.bot.send_message(log_group,
                                        f'{datetime.datetime.now()} : \n–û–®–ò–ë–ö–ê.–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –∫–Ω–æ–ø–∫–∏.–ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    elif action == "sendEveryone":
        user_id = call.data.split("*")[1]
        idict = {'status': 'sendEveryone', 'ei': user_id}
        lib.Query.addRecordByQuery('u_status', idict)
        await bot.send_message(user_id, '–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:')

    elif action == "sendFriends":
        user_id = call.data.split("*")[1]
        idict = {'status': 'sendFriendsme', 'ei': user_id}
        lib.Query.addRecordByQuery('u_status', idict)
        await bot.send_message(user_id, '–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:')

    elif action == "sendBusiness":
        user_id = call.data.split("*")[1]
        idict = {'status': 'sendBusiness', 'ei': user_id}
        lib.Query.addRecordByQuery('u_status', idict)
        await bot.send_message(user_id, '–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:')

    elif action == "new":
        try:
            user_id = call.data.split("_")[2]
            print(f'id –∏–∑ –ø—Ä–∏—Å–æ–µ–¥–µ–Ω–∏—Ç—å—Å—è –∫ –ø—Ä–æ–µ–∫—Ç—É {user_id}')
            ttemp = lib.Query.getFieldByQuery('u', f'ei = {user_id}', 'blocked')
            if ttemp == 1:
                await call.message.edit_text(
                    f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç—ã –±—ã–ª(–∞) –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω(–∞). –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–æ –æ—à–∏–±–æ—á–Ω–æ - –ø—Ä–æ—Å—å–±–∞ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø—Ä–æ–µ–∫—Ç–∞')
            else:
                idict = {'status': 'name', 'ei': user_id}
                lib.Query.addRecordByQuery('u_status', idict)
                # await call.message.edit_text(
                #     '–°–Ω–∞—á–∞–ª–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤. \n–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? \n<b>–ù–∞–ø–∏—à–∏ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é</b>',
                #     parse_mode=types.ParseMode.HTML)
                await call.message.edit_text(
                    f"##################",
                    parse_mode=types.ParseMode.HTML)
                await call.message.answer('–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –ø—Ä–æ–µ–∫—Ç—É')
                await call.message.answer(
                    '–≤–æ–ø—Ä–æ—Å1',
                    parse_mode=types.ParseMode.HTML)

        except:
            # await call.message.edit_text(
            #     '–ú–∞–º–∞ –º–∏—è!üò∞ –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ù–æ —è —É–∂–µ —Å–æ–æ–±—â–∏–ª —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –æ–± –æ—à–∏–±–∫–µ, —Å–∫–æ—Ä–æ –≤—Å—ë —É–ª–∞–¥–∏–º.')
            await call.message.answer(
                '–ú–∞–º–∞ –º–∏—è!üò∞ –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ù–æ —è —É–∂–µ —Å–æ–æ–±—â–∏–ª —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –æ–± –æ—à–∏–±–∫–µ, —Å–∫–æ—Ä–æ –≤—Å—ë —É–ª–∞–¥–∏–º.')
            await bot.send_message(log_group, f'{datetime.datetime.now()} : \n–û–®–ò–ë–ö–ê.new_user —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ')
    elif action == "cancel":
        user_id = call.data.split("_")[2]
        lib.Query.deleteRecordByQuery('u_status', f'ei = {user_id};')
        # await call.message.edit_text('–ü–æ–Ω—è–ª, –æ—Ç–º–µ–Ω–∏–ª –∑–∞–ø—Ä–æ—Å –≤ —Ç–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫—É')
        await call.message.answer('–û—Ç–º–µ–Ω–∏—Ç—å')
        await call.message.answer('–ü–æ–Ω—è–ª, –æ—Ç–º–µ–Ω–∏–ª –∑–∞–ø—Ä–æ—Å –≤ —Ç–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫—É')
    elif action == "gender":
        user_id = int(call.data.split("_")[2])
        user_gender = int(call.data.split("_")[3])
        idict = {'gender': user_gender}
        await call.message.edit_text(
            f"–†–∞–¥ –∑–Ω–∞–∫–æ–º—Å—Ç–≤—É, {lib.Query.getFieldByQuery('u', f'ei = {user_id}', 'first_name')}! –í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª")
        if user_gender == 0:
            await call.message.answer(f'–Ø - –∂–µ–Ω—â–∏–Ω–∞ üëß')
        else:
            await call.message.answer(f'–Ø - –º—É–∂—á–∏–Ω–∞ üë¶')
        lib.Query.updateRecordByQuery('u', idict, f'ei = {user_id}')
        # await call.message.edit_text(f'–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ —Ç—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –±–æ–ª—å—à—É—é —á–∞—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏? \n ',
        #                              reply_markup=get_keyboard_sity(user_id, 'r'))
        await call.message.answer(f'–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ —Ç—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –±–æ–ª—å—à—É—é —á–∞—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏? \n ',
                                  reply_markup=get_keyboard_sity(user_id, 'r'))
    elif action == "sity":
        user_id = int(call.data.split("_")[2])
        user_sity = call.data.split("_")[3]
        step = call.data.split("_")[4]
        await call.message.edit_text(f'–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ —Ç—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –±–æ–ª—å—à—É—é —á–∞—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏? \n ')
        await call.message.answer(user_sity)
        if step == 'r':
            if user_sity == '0':
                await call.message.answer('–ü–æ–Ω—è–ª, –∞ –∏–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –≥–æ—Ä–æ–¥–∞?')
                idict = {'status': 'sity', 'ei': user_id}
                lib.Query.addRecordByQuery('u_status', idict)
            else:
                idict = {'sity': user_sity}
                lib.Query.updateRecordByQuery('u', idict, f'ei = {user_id}')
                await call.message.answer(
                    '–°—É–ø–µ—Ä! –£ –º–µ–Ω—è –µ—Å—Ç—å —Ç—É—Ç –æ—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–±—è—Ç–∞ –¥–ª—è –æ–±—â–µ–Ω–∏—è :)\n–ù–∞ –∫–∞–∫–∏—Ö —è–∑—ã–∫–∞—Ö —Ç–µ–±–µ –±—É–¥–µ—Ç —É–¥–æ–±–Ω–æ –æ–±—â–∞—Ç—å—Å—è –Ω–∞ –≤—Å—Ç—Ä–µ—á–∞—Ö? –í—ã–±–µ—Ä–∏ –≤—Å–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã',
                    reply_markup=get_keyboard_lang(user_id, 'r'))
        else:
            if user_sity == '0':
                await call.message.answer('–ü–æ–Ω—è–ª, –∞ –∏–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –≥–æ—Ä–æ–¥–∞?')
                idict = {'status': 'sityedit', 'ei': user_id}
                lib.Query.addRecordByQuery('u_status', idict)
            else:
                idict = {'sity': user_sity}
                lib.Query.updateRecordByQuery('u', idict, f'ei = {user_id}')
                if (int(lib.Query.getFieldByQuery('u', f'ei = {user_id}', 'business')) == 1) and (
                        int(lib.Query.getFieldByQuery('u', f'ei = {user_id}', 'friends')) == 0):
                    # await call.message.edit_text(f"–ü–æ—Å–º–æ—Ç—Ä–∏, –∫–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –±—É–¥—É—â–∏—Ö –¥—Ä—É–∑–µ–π.")
                    await call.message.answer(f"–ü–æ—Å–º–æ—Ç—Ä–∏, –∫–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.")
                    asyncio.sleep(5)
                    await finall(user_id)
                else:
                    # await call.message.edit_text(f"–ü–æ—Å–º–æ—Ç—Ä–∏, –∫–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.")
                    await call.message.answer(f"–ü–æ—Å–º–æ—Ç—Ä–∏, –∫–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.")
                    asyncio.sleep(5)
                    await finall_f(user_id)
    elif action == "lang":
        user_id = int(call.data.split("_")[2])
        user_lang = call.data.split("_")[3]
        act = call.data.split("_")[4]
        step = call.data.split("_")[5]
        if step == 'r':
            if user_lang == '9':
                u_lang = lib.Query.checkCountByQuery('u_lang_id', f'ei = {user_id}')
                if u_lang != 0:
                    await call.message.edit_text(
                        '–°—É–ø–µ—Ä! –£ –º–µ–Ω—è –µ—Å—Ç—å —Ç—É—Ç –æ—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–±—è—Ç–∞ –¥–ª—è –æ–±—â–µ–Ω–∏—è :)\n–ù–∞ –∫–∞–∫–∏—Ö —è–∑—ã–∫–∞—Ö —Ç–µ–±–µ –±—É–¥–µ—Ç —É–¥–æ–±–Ω–æ –æ–±—â–∞—Ç—å—Å—è –Ω–∞ –≤—Å—Ç—Ä–µ—á–∞—Ö? –í—ã–±–µ—Ä–∏ –≤—Å–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã')
                    await call.message.answer('–ì–æ—Ç–æ–≤–æ')
                    await call.message.answer(
                        '–ó–∞–ø–æ–º–Ω—é, –∏–¥–µ–º –¥–∞–ª—å—à–µ\n\n–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?\n(–Ø –Ω–∏–∫–æ–º—É –Ω–µ —Å–∫–∞–∂—É, —ç—Ç–æ –ª–∏—à—å –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏)üòâ\n\n–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –≥–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è ',
                        reply_markup=get_keyboard_year(user_id, 'r'))
                else:
                    # await call.message.edit_text(
                    #     '–ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º –æ–¥–∏–Ω —è–∑—ã–∫ –Ω–∞ –∫–∞–∫–æ–º —Ç–µ–±–µ –±—É–¥–µ—Ç —É–¥–æ–±–Ω–æ –æ–±—â–∞—Ç—å—Å—è –Ω–∞ –≤—Å—Ç—Ä–µ—á–∞—Ö. –ù–æ –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ))',
                    #     reply_markup=get_keyboard_lang(user_id, step))
                    await call.message.answer(
                        '–ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º –æ–¥–∏–Ω —è–∑—ã–∫ –Ω–∞ –∫–∞–∫–æ–º —Ç–µ–±–µ –±—É–¥–µ—Ç —É–¥–æ–±–Ω–æ –æ–±—â–∞—Ç—å—Å—è –Ω–∞ –≤—Å—Ç—Ä–µ—á–∞—Ö. –ù–æ –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ))',
                        reply_markup=get_keyboard_lang(user_id, step))
            else:
                if act == '0':
                    if user_lang == '0':
                        await call.message.answer('–ê–Ω–≥–ª–∏–π—Å–∫–∏–π')
                    elif user_lang == '1':
                        await call.message.answer('–ì—Ä—É–∑–∏–Ω—Å–∫–∏–π')
                    elif user_lang == '2':
                        await call.message.answer('–†—É—Å—Å–∫–∏–π')

                    idict = {'ei': user_id, 'lang_id': user_lang}
                    lib.Query.addRecordByQuery('u_lang_id', idict)
                else:
                    lib.Query.deleteRecordByQuery('u_lang_id',
                                                  f'ei = {user_id} AND lang_id = {user_lang};')
                await call.message.edit_reply_markup(reply_markup=get_keyboard_lang(user_id, step))
        else:
            if user_lang == '9':
                u_lang = lib.Query.checkCountByQuery('u_lang_id', f'ei = {user_id}')
                if u_lang != 0:
                    # await call.message.edit_text(f"–ü–æ—Å–º–æ—Ç—Ä–∏, –∫–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.")
                    await call.message.edit_text(
                        '–°—É–ø–µ—Ä! –£ –º–µ–Ω—è –µ—Å—Ç—å —Ç—É—Ç –æ—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–±—è—Ç–∞ –¥–ª—è –æ–±—â–µ–Ω–∏—è :)\n–ù–∞ –∫–∞–∫–∏—Ö —è–∑—ã–∫–∞—Ö —Ç–µ–±–µ –±—É–¥–µ—Ç —É–¥–æ–±–Ω–æ –æ–±—â–∞—Ç—å—Å—è –Ω–∞ –≤—Å—Ç—Ä–µ—á–∞—Ö? –í—ã–±–µ—Ä–∏ –≤—Å–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã')
                    await call.message.answer('–ì–æ—Ç–æ–≤–æ')

                    await call.message.answer(f"–ü–æ—Å–º–æ—Ç—Ä–∏, –∫–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.")
                    asyncio.sleep(5)
                    if (int(lib.Query.getFieldByQuery('u', f'ei = {user_id}', 'business')) == 1) and (
                            int(lib.Query.getFieldByQuery('u', f'ei = {user_id}', 'friends')) == 0):
                        await finall(user_id)
                    else:
                        await finall_f(user_id)
                else:
                    # await call.message.edit_text(
                    #     '–ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º –æ–¥–∏–Ω —è–∑—ã–∫ –Ω–∞ –∫–∞–∫–æ–º —Ç–µ–±–µ –±—É–¥–µ—Ç —É–¥–æ–±–Ω–æ –æ–±—â–∞—Ç—å—Å—è –Ω–∞ –≤—Å—Ç—Ä–µ—á–∞—Ö. –ù–æ –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ))',
                    #     reply_markup=get_keyboard_lang(user_id, step))
                    await call.message.answer(
                        '–ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º –æ–¥–∏–Ω —è–∑—ã–∫ –Ω–∞ –∫–∞–∫–æ–º —Ç–µ–±–µ –±—É–¥–µ—Ç —É–¥–æ–±–Ω–æ –æ–±—â–∞—Ç—å—Å—è –Ω–∞ –≤—Å—Ç—Ä–µ—á–∞—Ö. –ù–æ –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ))',
                        reply_markup=get_keyboard_lang(user_id, step))
            else:
                if act == '0':
                    if user_lang == '0':
                        await call.message.answer('–ê–Ω–≥–ª–∏–π—Å–∫–∏–π')
                    elif user_lang == '1':
                        await call.message.answer('–ì—Ä—É–∑–∏–Ω—Å–∫–∏–π')
                    elif user_lang == '2':
                        await call.message.answer('–†—É—Å—Å–∫–∏–π')
                    idict = {'ei': user_id, 'lang_id': user_lang}
                    lib.Query.addRecordByQuery('u_lang_id', idict)
                else:
                    lib.Query.deleteRecordByQuery('u_lang_id',
                                                  f'ei = {user_id} AND lang_id = {user_lang};')
                await call.message.edit_reply_markup(reply_markup=get_keyboard_lang(user_id, step))
    elif action == "gen-year":
        user_id = int(call.data.split("_")[2])
        year = call.data.split("_")[3]
        step = call.data.split("_")[4]
        await call.message.edit_text(
            '–ó–∞–ø–æ–º–Ω—é, –∏–¥–µ–º –¥–∞–ª—å—à–µ\n\n–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?\n(–Ø –Ω–∏–∫–æ–º—É –Ω–µ —Å–∫–∞–∂—É, —ç—Ç–æ –ª–∏—à—å –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏)üòâ\n\n–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –≥–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è ')
        await call.message.answer(year)
        # await call.message.edit_text \
        #     (f'–¢–µ–ø–µ—Ä—å –º–µ—Å—è—Ü', reply_markup=get_keyboard_mounth(user_id, year, step))
        await call.message.answer(f'–¢–µ–ø–µ—Ä—å –º–µ—Å—è—Ü', reply_markup=get_keyboard_mounth(user_id, year, step))
    elif action == "gen-mounth":
        user_id = int(call.data.split("_")[2])
        year = call.data.split("_")[3]
        mounth = call.data.split("_")[4]
        step = call.data.split("_")[5]
        await call.message.edit_text(f'–¢–µ–ø–µ—Ä—å –º–µ—Å—è—Ü')
    elif action == "gen-day":
        try:
            user_id = int(call.data.split("_")[2])
            year = call.data.split("_")[3]
            mounth = call.data.split("_")[4]
            day = call.data.split("_")[5]
            step = call.data.split("_")[6]
            bday = year + '-' + mounth + '-' + day
            idict = {'bday': bday}
            lib.Query.updateRecordByQuery('u', idict, f'ei = {user_id}')
            await call.message.edit_text(f'–ò –¥–µ–Ω—å)')
            await call.message.answer(day)
            if step == 'r':
                # await call.message.edit_text(
                #     f'–ê —Ç–µ–ø–µ—Ä—å ‚Äì —Å–∞–º–æ–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ. –†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Å–≤–æ–∏—Ö –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞—Ö, –∏ —è –ø–æ–¥–±–µ—Ä—É —Ç–µ–±–µ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞. \n–ù–∞ —á–µ–º —Å–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º—Å—è –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å?',
                #     reply_markup=get_keyboard_choose(user_id))
                await call.message.answer(
                    f'–ê —Ç–µ–ø–µ—Ä—å ‚Äì —Å–∞–º–æ–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ. –†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Å–≤–æ–∏—Ö –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞—Ö, –∏ —è –ø–æ–¥–±–µ—Ä—É —Ç–µ–±–µ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞. \n–ù–∞ —á–µ–º —Å–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º—Å—è –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å?',
                    reply_markup=get_keyboard_choose(user_id))
            else:
                if (int(lib.Query.getFieldByQuery('u', f'ei = {user_id}', 'business')) == 1) and (
                        int(lib.Query.getFieldByQuery('u', f'ei = {user_id}', 'friends')) == 0):
                    # await call.message.edit_text(f"–ü–æ—Å–º–æ—Ç—Ä–∏, –∫–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.")
                    await call.message.answer(f"–ü–æ—Å–º–æ—Ç—Ä–∏, –∫–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.")
                    asyncio.sleep(5)
                    await finall(user_id)
                else:
                    # await call.message.edit_text(f"–ü–æ—Å–º–æ—Ç—Ä–∏, –∫–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.")
                    await call.message.answer(f"–ü–æ—Å–º–æ—Ç—Ä–∏, –∫–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.")
                    asyncio.sleep(5)
                    await finall_f(user_id)
        except:
            await call.bot.send_message(log_group,
                                        f"{datetime.datetime.now()} : \n–û–®–ò–ë–ö–ê.–ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É "
                                        f"@{call.from_user.username}")
    elif action == "choose":
        user_id = int(call.data.split("_")[2])
        act = call.data.split("_")[3]
        await call.message.edit_text(
            f'–ê —Ç–µ–ø–µ—Ä—å ‚Äì —Å–∞–º–æ–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ. –†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Å–≤–æ–∏—Ö –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞—Ö, –∏ —è –ø–æ–¥–±–µ—Ä—É —Ç–µ–±–µ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞. \n–ù–∞ —á–µ–º —Å–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º—Å—è –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å?')
        if act == '0':
            await call.message.answer(f"–ù–∞–π—Ç–∏ –¥—Ä—É–∑–µ–π üö¥‚Äç‚ôÇ")
            # await call.message.edit_text \
            #     (f'–û—Ç–º–µ—Ç—å 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–æ—Å—É–≥–∞, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±–µ –Ω—Ä–∞–≤—è—Ç—Å—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ',
            #      reply_markup=get_keyboard_friends_leisure(user_id, 'fl', 'r'))
            await call.message.answer \
                (f'–û—Ç–º–µ—Ç—å 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–æ—Å—É–≥–∞, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±–µ –Ω—Ä–∞–≤—è—Ç—Å—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ',
                 reply_markup=get_keyboard_friends_leisure(user_id, 'fl', 'r'))
        else:
            await call.message.answer(f"–ù–∞–π—Ç–†–∞—Å—à–∏—Ä–∏—Ç—å —Å–µ—Ç—å –¥–µ–ª–æ–≤—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ üí∂‚ôÇ")
            # await call.message.edit_text \
            #     (f'–†–∞—Å—Å–∫–∞–∂–∏, —á–µ–º —Ç—ã —Å–µ–π—á–∞—Å –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è?', reply_markup=get_keyboard_business(user_id, 'r'))
            await call.message.answer \
                (f'–†–∞—Å—Å–∫–∞–∂–∏, —á–µ–º —Ç—ã —Å–µ–π—á–∞—Å –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è?', reply_markup=get_keyboard_business(user_id, 'r'))
    elif action == "fl":
        user_id = int(call.data.split("_")[2])
        table_id = int(call.data.split("_")[3])
        act = call.data.split("_")[4]
        step = call.data.split("_")[5]
        if step == 'r' or step == 'm':
            if act == '0':
                await call.message.answer(u_fl.at[table_id - 1, 'name'])
                idict = {'ei': user_id, 'fli': table_id}
                lib.Query.addRecordByQuery('flu', idict)
            else:
                lib.Query.deleteRecordByQuery('flu',
                                              f'ei = {user_id} AND fli = {table_id};')
            if int(lib.Query.checkCountByQuery('flu', f'ei = {user_id}')) < 3:
                await call.message.edit_reply_markup(reply_markup=get_keyboard_friends_leisure(user_id, 'fl', step))
                if table_id == 17:
                    await bot.send_message(user_id, '–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ —É–≤–ª–µ—á–µ–Ω–∏–µ: ')
                    idict = {'status': 'else', 'ei': user_id}
                    lib.Query.addRecordByQuery('u_status', idict)
            else:
                if step == 'r' or step == 'm':
                    # await call.message.edit_text(f'–û—Ç–º–µ—Ç—å 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–æ—Å—É–≥–∞, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±–µ –Ω—Ä–∞–≤—è—Ç—Å—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ')
                    await call.message.edit_text(
                        f'–ê —Ç–µ–ø–µ—Ä—å ‚Äì —Å–∞–º–æ–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ. –†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Å–≤–æ–∏—Ö –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞—Ö, –∏ —è –ø–æ–¥–±–µ—Ä—É —Ç–µ–±–µ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞. \n–ù–∞ —á–µ–º —Å–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º—Å—è –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å?')
                    await call.message.answer(f'–û—Ç–º–µ—Ç—å 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–æ—Å—É–≥–∞, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±–µ –Ω—Ä–∞–≤—è—Ç—Å—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ')
                    await call.message.answer(f'–°—É–ø–µ—Ä! –£ —Ç–µ–±—è –º–Ω–æ–≥–æ –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤ :)' \
                                              f'\n–ê —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –µ—â–µ –¥–æ 3-—Ö –≤–µ—â–µ–π, —á–µ–º –ª—é–±–∏—à—å –∑–∞–Ω–∏–º–∞—Ç—å—Å—è',
                                              reply_markup=get_keyboard_friends_leisure_plus(user_id, 'r'))
                else:
                    # await call.message.edit_text(f'–°—É–ø–µ—Ä! –£ —Ç–µ–±—è –º–Ω–æ–≥–æ –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤ :)')
                    await call.message.answer(f'–°—É–ø–µ—Ä! –£ —Ç–µ–±—è –º–Ω–æ–≥–æ –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤ :)')
        else:
            if int(lib.Query.checkCountByQuery('flu', f'ei = {user_id}')) == 3:
                if act == '0':
                    # await call.message.edit_text(
                    #     f'–ú–∞–∫—Å–∏–º—É–º —Ç—Ä–∏ —É–≤–ª–µ—á–µ–Ω–∏—è, –ø—Ä–æ—Å—å–±–∞ —É–±—Ä–∞—Ç—å –æ–¥–Ω–æ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö (–Ω–∞–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç), —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ',
                    #     reply_markup=get_keyboard_friends_leisure(user_id, 'fl', step))
                    await call.message.answer(
                        f'–ú–∞–∫—Å–∏–º—É–º —Ç—Ä–∏ —É–≤–ª–µ—á–µ–Ω–∏—è, –ø—Ä–æ—Å—å–±–∞ —É–±—Ä–∞—Ç—å –æ–¥–Ω–æ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö (–Ω–∞–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç), —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ',
                        reply_markup=get_keyboard_friends_leisure(user_id, 'fl', step))
                else:
                    lib.Query.deleteRecordByQuery('flu',
                                                  f'ei = {user_id} AND fli = {table_id};')
                    await call.message.edit_reply_markup(reply_markup=get_keyboard_friends_leisure(user_id, 'fl', step))
            elif int(lib.Query.checkCountByQuery('flu', f'ei = {user_id}')) == 2:
                if act == '0':
                    await call.message.answer(u_fl.at[table_id - 1, 'name'])
                    idict = {'ei': user_id, 'fli': table_id}
                    lib.Query.addRecordByQuery('flu', idict)
                    # await call.message.edit_text(f'–û—Ç–º–µ—Ç—å 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–æ—Å—É–≥–∞, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±–µ –Ω—Ä–∞–≤—è—Ç—Å—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ')
                    await call.message.edit_text(
                        f'–ê —Ç–µ–ø–µ—Ä—å ‚Äì —Å–∞–º–æ–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ. –†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Å–≤–æ–∏—Ö –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞—Ö, –∏ —è –ø–æ–¥–±–µ—Ä—É —Ç–µ–±–µ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞. \n–ù–∞ —á–µ–º —Å–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º—Å—è –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å?')
                    await call.message.answer(f'–û—Ç–º–µ—Ç—å 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–æ—Å—É–≥–∞, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±–µ –Ω—Ä–∞–≤—è—Ç—Å—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ')
                    await call.message.answer(f"–ü–æ—Å–º–æ—Ç—Ä–∏, –∫–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –±—É–¥—É—â–∏—Ö –¥—Ä—É–∑–µ–π.")
                    await asyncio.sleep(5)
                    await finall_f(user_id)
                else:
                    lib.Query.deleteRecordByQuery('flu',
                                                  f'ei = {user_id} AND fli = {table_id};')
                    await call.message.edit_reply_markup(reply_markup=get_keyboard_friends_leisure(user_id, 'fl', step))
            else:
                if act == '0':
                    idict = {'ei': user_id, 'fli': table_id}
                    lib.Query.addRecordByQuery('flu', idict)
                    await call.message.edit_reply_markup(reply_markup=get_keyboard_friends_leisure(user_id, 'fl', step))
                else:
                    lib.Query.deleteRecordByQuery('flu',
                                                  f'ei = {user_id} AND fli = {table_id};')
                    await call.message.edit_reply_markup(reply_markup=get_keyboard_friends_leisure(user_id, 'fl', step))
    elif action == "flp":
        user_id = int(call.data.split("_")[2])
        table_id = int(call.data.split("_")[3])
        act = call.data.split("_")[4]
        step = call.data.split("_")[5]
        if step == 'r' or step == 'm':
            if act == '0':
                await call.message.answer(u_fl.at[table_id - 1, 'name'])
                idict = {'ei': user_id, 'fli': table_id}
                lib.Query.addRecordByQuery('flu_plus', idict)
            else:
                lib.Query.deleteRecordByQuery('flu_plus',
                                              f'ei = {user_id} AND fli = {table_id};')
            if int(lib.Query.checkCountByQuery('flu_plus', f'ei = {user_id}')) < 3:
                await call.message.edit_reply_markup(reply_markup=get_keyboard_friends_leisure_plus(user_id, step))
            else:

                await call.message.edit_text(f'–ê —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –µ—â–µ –¥–æ 3-—Ö –≤–µ—â–µ–π, —á–µ–º –ª—é–±–∏—à—å –∑–∞–Ω–∏–º–∞—Ç—å—Å—è')
                # await call.message.answer(f'–ê —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –µ—â–µ –¥–æ 3-—Ö –≤–µ—â–µ–π, —á–µ–º –ª—é–±–∏—à—å –∑–∞–Ω–∏–º–∞—Ç—å—Å—è')
                await call.message.answer(
                    f"–û—Ç–ª–∏—á–Ω–æ! –î–æ–±–∞–≤—å –µ—â–µ –ø–∞—Ä—É —Å–ª–æ–≤ –æ —Ç–æ–º, —á–µ–º –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è –ø–æ —Ä–∞–±–æ—Ç–µ (–º–∏–Ω–∏–º—É–º 60 —Å–∏–º–≤–æ–ª–æ–≤):")
                if step == 'r':
                    idict = {'status': 'free_time', 'ei': user_id}
                elif step == 'm':
                    idict = {'status': 'free_time_match', 'ei': user_id}
                lib.Query.addRecordByQuery('u_status', idict)
        else:
            if int(lib.Query.checkCountByQuery('flu_plus', f'ei = {user_id}')) == 3:
                if act == '0':
                    # await call.message.edit_text(
                    #     f'–ú–∞–∫—Å–∏–º—É–º —Ç—Ä–∏ —É–≤–ª–µ—á–µ–Ω–∏—è, –ø—Ä–æ—Å—å–±–∞ —É–±—Ä–∞—Ç—å –æ–¥–Ω–æ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö (–Ω–∞–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç), —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ',
                    #     reply_markup=get_keyboard_friends_leisure_plus(user_id, step))
                    await call.message.answer(
                        f'–ú–∞–∫—Å–∏–º—É–º —Ç—Ä–∏ —É–≤–ª–µ—á–µ–Ω–∏—è, –ø—Ä–æ—Å—å–±–∞ —É–±—Ä–∞—Ç—å –æ–¥–Ω–æ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö (–Ω–∞–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç), —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ',
                        reply_markup=get_keyboard_friends_leisure_plus(user_id, step))
                else:
                    lib.Query.deleteRecordByQuery('flu_plus',
                                                  f'ei = {user_id} AND fli = {table_id};')
                    await call.message.edit_reply_markup(reply_markup=get_keyboard_friends_leisure_plus(user_id, step))
            elif int(lib.Query.checkCountByQuery('flu_plus', f'ei = {user_id}')) == 2:
                if act == '0':
                    await call.message.answer(u_fl.at[table_id - 1, 'name'])
                    idict = {'ei': user_id, 'fli': table_id}
                    lib.Query.addRecordByQuery('flu_plus', idict)

                    # await call.message.edit_text(f'–ü–æ—Å–º–æ—Ç—Ä–∏, –∫–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.')
                    await call.message.answer(f'–ü–æ—Å–º–æ—Ç—Ä–∏, –∫–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.')
                    asyncio.sleep(5)
                    await call.message.answer(
                        f"–û—Ç–ª–∏—á–Ω–æ! –î–æ–±–∞–≤—å –µ—â–µ –ø–∞—Ä—É —Å–ª–æ–≤ –æ —Ç–æ–º, —á–µ–º –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è –ø–æ —Ä–∞–±–æ—Ç–µ (–º–∏–Ω–∏–º—É–º 60 —Å–∏–º–≤–æ–ª–æ–≤):")
                    # await call.message.edit_text(f"")
                    await finall_f(user_id)
                else:
                    lib.Query.deleteRecordByQuery('flu_plus',
                                                  f'ei = {user_id} AND fli = {table_id};')
                    await call.message.edit_reply_markup(reply_markup=get_keyboard_friends_leisure_plus(user_id, step))
            else:
                if act == '0':
                    idict = {'ei': user_id, 'fli': table_id}
                    lib.Query.addRecordByQuery('flu_plus', idict)
                    await call.message.edit_reply_markup(reply_markup=get_keyboard_friends_leisure_plus(user_id, step))
                else:
                    lib.Query.deleteRecordByQuery('flu_plus',
                                                  f'ei = {user_id} AND fli = {table_id};')
                    await call.message.edit_reply_markup(reply_markup=get_keyboard_friends_leisure_plus(user_id, step))
    elif action == "de":
        user_id = int(call.data.split("_")[2])
        id_deal = call.data.split("_")[3]
        step = call.data.split("_")[4]
        if step == 'r' or step == 'm':
            await call.message.answer(deal_b.at[int(id_deal) - 1, 'name'])
            idict = {'ei': user_id, 'id_deal': id_deal}
            lib.Query.addRecordByQuery('business_deal_u', idict)
            if step == 'r':
                await call.message.edit_reply_markup()
                await call.message.answer(
                    '–í –∫–∞–∫–æ–π —Å—Ñ–µ—Ä–µ? –ú–∞–∫—Å–∏–º—É–º –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å 3 —Å—Ñ–µ—Ä—ã. –ï—Å–ª–∏ –≤—ã–±–µ—Ä–µ—à—å –º–µ–Ω—å—à–µ, –Ω–∞–∂–º–∏ –ì–æ—Ç–æ–≤–æ ‚Äî –∏ –º—ã –ø—Ä–æ–¥–æ–ª–∂–∏–º',
                    reply_markup=get_keyboard_business_sector(user_id, 'sect', 'r'))
            elif step == 'm':
                await call.message.edit_reply_markup()
                await call.message.answer(
                    '–í –∫–∞–∫–æ–π —Å—Ñ–µ—Ä–µ? –ú–∞–∫—Å–∏–º—É–º –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å 3 —Å—Ñ–µ—Ä—ã. –ï—Å–ª–∏ –≤—ã–±–µ—Ä–µ—à—å –º–µ–Ω—å—à–µ, –Ω–∞–∂–º–∏ –ì–æ—Ç–æ–≤–æ ‚Äî –∏ –º—ã –ø—Ä–æ–¥–æ–ª–∂–∏–º',
                    reply_markup=get_keyboard_business_sector(user_id, 'sect', 'm'))
        else:
            idict = {'ei': user_id, 'id_deal': id_deal}
            lib.Query.addRecordByQuery('business_deal_u', idict)
            # await call.message.edit_text(f"–ü–æ—Å–º–æ—Ç—Ä–∏, –∫–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.")
            await call.message.answer(f"–ü–æ—Å–º–æ—Ç—Ä–∏, –∫–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.")
            await finall(user_id)
    elif action == "sect":
        user_id = int(call.data.split("_")[2])
        id_sect = int(call.data.split("_")[3])
        act = call.data.split("_")[4]
        step = call.data.split("_")[5]
        if step == 'r' or step == 'm':
            if act == '0':
                await call.message.answer(sector_b.at[id_sect - 1, 'name'])
                idict = {'ei': user_id, 'id_sector': id_sect}
                lib.Query.addRecordByQuery('bsu', idict)
            else:
                lib.Query.deleteRecordByQuery('bsu',
                                              f'ei = {user_id} AND id_sector = {id_sect};')
            if act == 'all':
                # await call.message.edit_text(
                #     f'–ß—Ç–æ–±—ã —É —Ç–≤–æ–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ —Å–ª–æ–∂–∏–ª–æ—Å—å –±–æ–ª–µ–µ –ø–æ–ª–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ —Ç–≤–æ–µ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, —Ä–∞—Å—Å–∫–∞–∂–∏ –æ 2-3 —ç–ø–∏–∑–æ–¥–∞—Ö –≤ —Ä–∞–±–æ—Ç–µ, –∫–æ—Ç–æ—Ä—ã–º–∏ —Ç—ã –≥–æ—Ä–¥–∏—à—å—Å—è.')
                await call.message.edit_reply_markup()
                await call.message.answer(
                    f'–ß—Ç–æ–±—ã —É —Ç–≤–æ–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ —Å–ª–æ–∂–∏–ª–æ—Å—å –±–æ–ª–µ–µ –ø–æ–ª–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ —Ç–≤–æ–µ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, —Ä–∞—Å—Å–∫–∞–∂–∏ –æ 2-3 —ç–ø–∏–∑–æ–¥–∞—Ö –≤ —Ä–∞–±–æ—Ç–µ, –∫–æ—Ç–æ—Ä—ã–º–∏ —Ç—ã –≥–æ—Ä–¥–∏—à—å—Å—è.')
                idict = {'status': 'deal', 'ei': user_id}
                lib.Query.addRecordByQuery('u_status', idict)
            elif int(lib.Query.checkCountByQuery('bsu', f'ei = {user_id}')) < 3:
                await call.message.edit_reply_markup(reply_markup=get_keyboard_business_sector(user_id, 'sect', step))
            else:
                await call.message.edit_reply_markup()
                await call.message.answer(
                    f'–ß—Ç–æ–±—ã —É —Ç–≤–æ–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ —Å–ª–æ–∂–∏–ª–æ—Å—å –±–æ–ª–µ–µ –ø–æ–ª–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ —Ç–≤–æ–µ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, —Ä–∞—Å—Å–∫–∞–∂–∏ –æ 2-3 —ç–ø–∏–∑–æ–¥–∞—Ö –≤ —Ä–∞–±–æ—Ç–µ, –∫–æ—Ç–æ—Ä—ã–º–∏ —Ç—ã –≥–æ—Ä–¥–∏—à—å—Å—è.')
                if step == 'r':
                    idict = {'status': 'deal', 'ei': user_id}
                elif step == 'm':
                    idict = {'status': 'deal_match', 'ei': user_id}
                lib.Query.addRecordByQuery('u_status', idict)
        else:
            if int(lib.Query.checkCountByQuery('bsu', f'ei = {user_id}')) == 3:
                if act == '0':
                    # await call.message.edit_text(
                    #     f'–ú–∞–∫—Å–∏–º—É–º —Ç—Ä–∏ —É–≤–ª–µ—á–µ–Ω–∏—è, –ø—Ä–æ—Å—å–±–∞ —É–±—Ä–∞—Ç—å –æ–¥–Ω–æ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö (–Ω–∞–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç), —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ',
                    #     reply_markup=get_keyboard_business_sector(user_id, 'sect', step))
                    await call.message.answer(
                        f'–ú–∞–∫—Å–∏–º—É–º —Ç—Ä–∏ —É–≤–ª–µ—á–µ–Ω–∏—è, –ø—Ä–æ—Å—å–±–∞ —É–±—Ä–∞—Ç—å –æ–¥–Ω–æ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö (–Ω–∞–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç), —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ',
                        reply_markup=get_keyboard_business_sector(user_id, 'sect', step))
                else:
                    lib.Query.deleteRecordByQuery('bsu',
                                                  f'ei = {user_id} AND id_sector = {id_sect};')
                    await call.message.edit_reply_markup(
                        reply_markup=get_keyboard_business_sector(user_id, 'sect', step))
            elif int(lib.Query.checkCountByQuery('bsu', f'ei = {user_id}')) == 2:
                if act == '0':
                    await call.message.answer(sector_b.at[id_sect - 1, 'name'])
                    idict = {'ei': user_id, 'id_sector': id_sect}
                    lib.Query.addRecordByQuery('bsu', idict)
                    await call.message.edit_reply_markup()
                    await call.message.answer(f"–ü–æ—Å–º–æ—Ç—Ä–∏, –∫–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –±—É–¥—É—â–∏—Ö –¥—Ä—É–∑–µ–π.")
                    asyncio.sleep(5)
                    await finall(user_id)
                else:
                    lib.Query.deleteRecordByQuery('bsu',
                                                  f'ei = {user_id} AND id_sector = {id_sect};')
                    await call.message.edit_reply_markup(
                        reply_markup=get_keyboard_business_sector(user_id, 'sect', step))
            else:
                if act == '0':
                    await call.message.answer(sector_b.at[id_sect - 1, 'name'])
                    idict = {'ei': user_id, 'id_sector': id_sect}
                    lib.Query.addRecordByQuery('bsu', idict)
                    await call.message.edit_reply_markup(
                        reply_markup=get_keyboard_business_sector(user_id, 'sect', step))
                else:
                    lib.Query.deleteRecordByQuery('bsu',
                                                  f'ei = {user_id} AND id_sector = {id_sect};')
                    await call.message.edit_reply_markup(
                        reply_markup=get_keyboard_business_sector(user_id, 'sect', step))
    elif action == "cont":
        user_id = int(call.data.split("_")[2])
        table_id = int(call.data.split("_")[3])
        act = call.data.split("_")[4]
        step = call.data.split("_")[5]
        if step == 'r' or step == 'm':
            if act == '0':
                await call.message.answer(contact_b.at[table_id - 1, 'name'])
                idict = {'ei': user_id, 'id_contact': table_id}
                lib.Query.addRecordByQuery('bdcu', idict)
            else:
                lib.Query.deleteRecordByQuery('bdcu',
                                              f'ei = {user_id} AND id_contact = {table_id};')
            if int(lib.Query.checkCountByQuery('bdcu', f'ei = {user_id}')) < 2:
                await call.message.edit_reply_markup(reply_markup=get_keyboard_business_contact(user_id, step))
            else:
                await call.message.edit_reply_markup()
                await call.message.answer(
                    f'–° –∫–∞–∫–æ–π —Å—Ñ–µ—Ä–æ–π —Ö–æ—á–µ—à—å —Å–≤—è–∑–∞—Ç—å —Ä–∞–±–æ—Ç—É/–±–∏–∑–Ω–µ—Å? –ú–∞–∫—Å–∏–º—É–º –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ 3 —Å—Ñ–µ—Ä—ã, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–ª –º–µ–Ω—å—à–µ - –Ω–∞–∂–º–∏ –ì–æ—Ç–æ–≤–æ –∏ –º—ã –ø—Ä–æ–¥–æ–ª–∂–∏–º',
                    reply_markup=get_keyboard_business_sector(user_id, 'sect2', step))
        else:
            if act == '0':
                await call.message.answer(contact_b.at[table_id - 1, 'name'])
                idict = {'ei': user_id, 'id_contact': table_id}
                lib.Query.addRecordByQuery('bdcu', idict)
            else:
                lib.Query.deleteRecordByQuery('bdcu',
                                              f'ei = {user_id} AND id_contact = {table_id};')
            if int(lib.Query.checkCountByQuery('bdcu', f'ei = {user_id}')) < 2:
                await call.message.edit_reply_markup(reply_markup=get_keyboard_business_contact(user_id, step))
            else:
                await call.message.edit_reply_markup()
                await call.message.answer(f"–ü–æ—Å–º–æ—Ç—Ä–∏, –∫–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –±—É–¥—É—â–∏—Ö –¥—Ä—É–∑–µ–π.")
                asyncio.sleep(5)
                await finall(user_id)
    elif action == "sect2":
        user_id = int(call.data.split("_")[2])
        id_sect = int(call.data.split("_")[3])
        act = call.data.split("_")[4]
        step = call.data.split("_")[5]
        if step == 'r' or step == 'm':
            if act == '0':
                await call.message.answer(sector_b.at[id_sect - 1, 'name'])
                idict = {'ei': user_id, 'id_sector': id_sect}
                lib.Query.addRecordByQuery('bs2u', idict)
            else:
                lib.Query.deleteRecordByQuery('bs2u',
                                              f'ei = {user_id} AND id_sector = {id_sect};')
            if act == 'all':
                await call.message.edit_reply_markup()
                await call.message.answer(
                    '–î–∞–ª—å—à–µ! \n\n–û—Ç–ª–∏—á–Ω–æ! –î–æ–±–∞–≤—å –µ—â–µ –ø–∞—Ä—É —Å–ª–æ–≤ –æ —Ç–æ–º, —á–µ–º —É–≤–ª–µ–∫–∞–µ—à—å—Å—è –≤ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –¥–æ 3 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤)',
                    reply_markup=get_keyboard_friends_leisure(user_id, 'bl', step))
            elif int(lib.Query.checkCountByQuery('bs2u', f'ei = {user_id}')) < 3:
                await call.message.edit_reply_markup(reply_markup=get_keyboard_business_sector(user_id, 'sect2', step))
            else:
                await call.message.edit_reply_markup()
                await call.message.answer(
                    '–î–∞–ª—å—à–µ! \n\n–û—Ç–ª–∏—á–Ω–æ! –î–æ–±–∞–≤—å –µ—â–µ –ø–∞—Ä—É —Å–ª–æ–≤ –æ —Ç–æ–º, —á–µ–º —É–≤–ª–µ–∫–∞–µ—à—å—Å—è –≤ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –¥–æ 3 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤)',
                    reply_markup=get_keyboard_friends_leisure(user_id, 'bl', step))
        else:
            if int(lib.Query.checkCountByQuery('bs2u', f'ei = {user_id}')) == 3:
                if act == '0':
                    await call.message.edit_text(
                        f'–ú–∞–∫—Å–∏–º—É–º —Ç—Ä–∏ —Å—Ñ–µ—Ä—ã, –ø—Ä–æ—Å—å–±–∞ —É–±—Ä–∞—Ç—å –æ–¥–Ω—É –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö (–Ω–∞–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç), —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ',
                        reply_markup=get_keyboard_business_sector(user_id, 'sect2', step))
                    # await call.message.answer(
                    #     f'–ú–∞–∫—Å–∏–º—É–º —Ç—Ä–∏ —Å—Ñ–µ—Ä—ã, –ø—Ä–æ—Å—å–±–∞ —É–±—Ä–∞—Ç—å –æ–¥–Ω—É –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö (–Ω–∞–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç), —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ',
                    #     reply_markup=get_keyboard_business_sector(user_id, 'sect2', step))
                else:
                    lib.Query.deleteRecordByQuery('bs2u',
                                                  f'ei = {user_id} AND id_sector = {id_sect};')
                    await call.message.edit_reply_markup(
                        reply_markup=get_keyboard_business_sector(user_id, 'sect2', step))
            elif int(lib.Query.checkCountByQuery('bs2u', f'ei = {user_id}')) == 2:
                if act == '0':
                    await call.message.answer(sector_b.at[id_sect - 1, 'name'])
                    idict = {'ei': user_id, 'id_sector': id_sect}
                    lib.Query.addRecordByQuery('bs2u', idict)
                    await call.message.edit_reply_markup()
                    await call.message.answer(f"–ü–æ—Å–º–æ—Ç—Ä–∏, –∫–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.")
                    await finall(user_id)
                else:
                    lib.Query.deleteRecordByQuery('bs2u',
                                                  f'ei = {user_id} AND id_sector = {id_sect};')
                    await call.message.edit_reply_markup(
                        reply_markup=get_keyboard_business_sector(user_id, 'sect2', step))
            else:
                if act == '0':
                    await call.message.answer(sector_b.at[id_sect - 1, 'name'])
                    idict = {'ei': user_id, 'id_sector': id_sect}
                    lib.Query.addRecordByQuery('bs2u', idict)
                    await call.message.edit_reply_markup(
                        reply_markup=get_keyboard_business_sector(user_id, 'sect2', step))
                else:
                    lib.Query.deleteRecordByQuery('bs2u',
                                                  f'ei = {user_id} AND id_sector = {id_sect};')
                    await call.message.edit_reply_markup(
                        reply_markup=get_keyboard_business_sector(user_id, 'sect2', step))
    elif action == "bl":
        user_id = int(call.data.split("_")[2])
        table_id = int(call.data.split("_")[3])
        act = call.data.split("_")[4]
        step = call.data.split("_")[5]
        if step == 'r' or step == 'm':
            if act == '0':
                await call.message.answer(u_fl.at[table_id - 1, 'name'])
                idict = {'ei': user_id, 'leisure_id': table_id}
                lib.Query.addRecordByQuery('blu', idict)
            else:
                lib.Query.deleteRecordByQuery('blu',
                                              f'ei = {user_id} AND leisure_id = {table_id};')
            if int(lib.Query.checkCountByQuery('blu', f'ei = {user_id}')) < 3:
                await call.message.edit_reply_markup(reply_markup=get_keyboard_friends_leisure(user_id, 'bl', step))
            else:
                if step == 'r':
                    await call.message.edit_reply_markup()
                    idict = {'business': 1, 'week': 0}
                    lib.Query.updateRecordByQuery('u', idict, f'ei = {user_id}')
                    await call.message.answer(f"–ü–æ—Å–º–æ—Ç—Ä–∏, –∫–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.")
                    idict1 = {'ei': user_id}
                    lib.Query.addRecordByQuery('u_fee', idict1)
                    await finall(user_id)
                elif step == 'm':
                    await call.message.edit_reply_markup()
                    try:
                        await bot.set_my_commands(
                            commands=[
                                types.BotCommand('link', '–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç'),
                                types.BotCommand('help', '–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É'),
                                types.BotCommand('edit_fl', '–ò–∑–º–µ–Ω–∏—Ç—å –≤ –∞–Ω–∫–µ—Ç–µ –¥—Ä—É–∑—å—è —Ç–æ, —á—Ç–æ –Ω—Ä–∞–≤–∏—Ç—Å—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ'),
                                types.BotCommand('edit_flp', '–ò–∑–º–µ–Ω–∏—Ç—å –≤ –∞–Ω–∫–µ—Ç–µ –¥—Ä—É–∑—å—è —á–µ–º –ª—é–±–ª—é –∑–∞–Ω–∏–º–∞—Ç—å—Å—è'),
                                types.BotCommand('edit_fact', '–ò–∑–º–µ–Ω–∏—Ç—å –≤ –∞–Ω–∫–µ—Ç–µ –¥—Ä—É–∑—å—è —Ñ–∞–∫—Ç—ã –æ —Ä–∞–±–æ—Ç–µ'),
                                types.BotCommand('edit_deal', '–ò–∑–º–µ–Ω–∏—Ç—å –≤ –∞–Ω–∫–µ—Ç–µ –±–∏–∑–Ω–µ—Å –≤–∏–¥ —Å–≤–æ–µ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏'),
                                types.BotCommand('edit_sector', '–ò–∑–º–µ–Ω–∏—Ç—å –≤ –∞–Ω–∫–µ—Ç–µ –±–∏–∑–Ω–µ—Å —Å—Ñ–µ—Ä—ã –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏'),
                                types.BotCommand('edit_deal_fact', '–ò–∑–º–µ–Ω–∏—Ç—å –≤ –∞–Ω–∫–µ—Ç–µ –±–∏–∑–Ω–µ—Å —Å–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤ —Ä–∞–±–æ—Ç–µ'),
                                types.BotCommand('edit_contact', '–ò–∑–º–µ–Ω–∏—Ç—å –≤ –∞–Ω–∫–µ—Ç–µ –±–∏–∑–Ω–µ—Å —Ü–µ–ª—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤'),
                                types.BotCommand('edit_sector2',
                                                 '–ò–∑–º–µ–Ω–∏—Ç—å –≤ –∞–Ω–∫–µ—Ç–µ –±–∏–∑–Ω–µ—Å —Å—Ñ–µ—Ä—ã, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ —Ö–æ—á–µ—à—å —Å–≤—è–∑–∞—Ç—å —Ä–∞–±–æ—Ç—É/–±–∏–∑–Ω–µ—Å'),
                                types.BotCommand('edit_bl', '–ò–∑–º–µ–Ω–∏—Ç—å –≤ –∞–Ω–∫–µ—Ç–µ –±–∏–∑–Ω–µ—Å —É–≤–ª–µ—á–µ–Ω–∏—è –≤ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è')
                            ],
                            scope=types.BotCommandScopeChat(chat_id=call.from_user.id)
                        )
                    except:
                        await bot.send_message(log_group,
                                               f'{datetime.datetime.now()} : \n–û–®–ò–ë–ö–ê.start.–ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é')
                    await call.message.answer(f"–û—Ç–ª–∏—á–Ω–æ! –°–µ–π—á–∞—Å –ø–æ–¥–±–µ—Ä—É —Ç–µ–±–µ –ø–∞—Ä—É")
                    await match_business(user_id)
        else:
            if int(lib.Query.checkCountByQuery('blu', f'ei = {user_id}')) == 3:
                if act == '0':
                    await call.message.edit_text(
                        f'–ú–∞–∫—Å–∏–º—É–º —Ç—Ä–∏ —Å—Ñ–µ—Ä—ã, –ø—Ä–æ—Å—å–±–∞ —É–±—Ä–∞—Ç—å –æ–¥–Ω—É –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö (–Ω–∞–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç), —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ',
                        reply_markup=get_keyboard_friends_leisure(user_id, 'bl', step))
                else:
                    lib.Query.deleteRecordByQuery('blu',
                                                  f'ei = {user_id} AND leisure_id = {table_id};')
                    await call.message.edit_reply_markup(reply_markup=get_keyboard_friends_leisure(user_id, 'bl', step))
            elif int(lib.Query.checkCountByQuery('blu', f'ei = {user_id}')) == 3:
                if act == '0':
                    await call.message.answer(u_fl.at[table_id - 1, 'name'])
                    idict = {'ei': user_id, 'leisure_id': table_id}
                    lib.Query.addRecordByQuery('blu', idict)
                    await call.message.edit_reply_markup()
                    await call.message.answer(f"–ü–æ—Å–º–æ—Ç—Ä–∏, –∫–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.")
                    await finall(user_id)
                else:
                    lib.Query.deleteRecordByQuery('blu',
                                                  f'ei = {user_id} AND leisure_id = {table_id};')
                    await call.message.edit_reply_markup(reply_markup=get_keyboard_friends_leisure(user_id, 'bl', step))
            else:
                if act == '0':
                    idict = {'ei': user_id, 'leisure_id': table_id}
                    lib.Query.addRecordByQuery('blu', idict)
                    await call.message.edit_reply_markup(reply_markup=get_keyboard_friends_leisure(user_id, 'bl', step))
                else:
                    lib.Query.deleteRecordByQuery('blu',
                                                  f'ei = {user_id} AND leisure_id = {table_id};')
                    await call.message.edit_reply_markup(reply_markup=get_keyboard_friends_leisure(user_id, 'bl', step))
    elif action == "fin":
        user_id = int(call.data.split("_")[2])
        act = call.data.split("_")[3]
        if (int(lib.Query.getFieldByQuery('u', f'ei = {user_id}', 'business')) == 1) and (
                int(lib.Query.getFieldByQuery('u', f'ei = {user_id}', 'friends')) == 0):
            try:
                await bot.set_my_commands(
                    commands=[
                        types.BotCommand('link', '–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç'),
                        types.BotCommand('help', '–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É'),
                        types.BotCommand('edit_deal', '–ò–∑–º–µ–Ω–∏—Ç—å –≤ –∞–Ω–∫–µ—Ç–µ –±–∏–∑–Ω–µ—Å –≤–∏–¥ —Å–≤–æ–µ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏'),
                        types.BotCommand('edit_sector', '–ò–∑–º–µ–Ω–∏—Ç—å –≤ –∞–Ω–∫–µ—Ç–µ –±–∏–∑–Ω–µ—Å —Å—Ñ–µ—Ä—ã –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏'),
                        types.BotCommand('edit_deal_fact', '–ò–∑–º–µ–Ω–∏—Ç—å –≤ –∞–Ω–∫–µ—Ç–µ –±–∏–∑–Ω–µ—Å —Å–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤ —Ä–∞–±–æ—Ç–µ'),
                        types.BotCommand('edit_contact', '–ò–∑–º–µ–Ω–∏—Ç—å –≤ –∞–Ω–∫–µ—Ç–µ –±–∏–∑–Ω–µ—Å —Ü–µ–ª—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤'),
                        types.BotCommand('edit_sector2',
                                         '–ò–∑–º–µ–Ω–∏—Ç—å –≤ –∞–Ω–∫–µ—Ç–µ –±–∏–∑–Ω–µ—Å —Å—Ñ–µ—Ä—ã, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ —Ö–æ—á–µ—à—å —Å–≤—è–∑–∞—Ç—å —Ä–∞–±–æ—Ç—É/–±–∏–∑–Ω–µ—Å'),
                        types.BotCommand('edit_bl', '–ò–∑–º–µ–Ω–∏—Ç—å –≤ –∞–Ω–∫–µ—Ç–µ –±–∏–∑–Ω–µ—Å —É–≤–ª–µ—á–µ–Ω–∏—è –≤ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è')
                    ],
                    scope=types.BotCommandScopeChat(chat_id=call.from_user.id)
                )
            except:
                await bot.send_message(log_group,
                                       f'{datetime.datetime.now()} : \n–û–®–ò–ë–ö–ê.start.–ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é')
        elif int(lib.Query.getFieldByQuery('u', f'ei = {user_id}', 'business')) == 1 and int(
                lib.Query.getFieldByQuery('u', f'ei = {user_id}', 'friends')) == 1:
            try:
                await bot.set_my_commands(
                    commands=[
                        types.BotCommand('link', '–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç'),
                        types.BotCommand('help', '–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É'),
                        types.BotCommand('edit_fl', '–ò–∑–º–µ–Ω–∏—Ç—å –≤ –∞–Ω–∫–µ—Ç–µ –¥—Ä—É–∑—å—è —Ç–æ, —á—Ç–æ –Ω—Ä–∞–≤–∏—Ç—Å—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ'),
                        types.BotCommand('edit_flp', '–ò–∑–º–µ–Ω–∏—Ç—å –≤ –∞–Ω–∫–µ—Ç–µ –¥—Ä—É–∑—å—è —á–µ–º –ª—é–±–ª—é –∑–∞–Ω–∏–º–∞—Ç—å—Å—è'),
                        types.BotCommand('edit_fact', '–ò–∑–º–µ–Ω–∏—Ç—å –≤ –∞–Ω–∫–µ—Ç–µ –¥—Ä—É–∑—å—è —Ñ–∞–∫—Ç—ã –æ —Ä–∞–±–æ—Ç–µ'),
                        types.BotCommand('edit_deal', '–ò–∑–º–µ–Ω–∏—Ç—å –≤ –∞–Ω–∫–µ—Ç–µ –±–∏–∑–Ω–µ—Å –≤–∏–¥ —Å–≤–æ–µ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏'),
                        types.BotCommand('edit_sector', '–ò–∑–º–µ–Ω–∏—Ç—å –≤ –∞–Ω–∫–µ—Ç–µ –±–∏–∑–Ω–µ—Å —Å—Ñ–µ—Ä—ã –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏'),
                        types.BotCommand('edit_deal_fact', '–ò–∑–º–µ–Ω–∏—Ç—å –≤ –∞–Ω–∫–µ—Ç–µ –±–∏–∑–Ω–µ—Å —Å–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤ —Ä–∞–±–æ—Ç–µ'),
                        types.BotCommand('edit_contact', '–ò–∑–º–µ–Ω–∏—Ç—å –≤ –∞–Ω–∫–µ—Ç–µ –±–∏–∑–Ω–µ—Å —Ü–µ–ª—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤'),
                        types.BotCommand('edit_sector2',
                                         '–ò–∑–º–µ–Ω–∏—Ç—å –≤ –∞–Ω–∫–µ—Ç–µ –±–∏–∑–Ω–µ—Å —Å—Ñ–µ—Ä—ã, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ —Ö–æ—á–µ—à—å —Å–≤—è–∑–∞—Ç—å —Ä–∞–±–æ—Ç—É/–±–∏–∑–Ω–µ—Å'),
                        types.BotCommand('edit_bl', '–ò–∑–º–µ–Ω–∏—Ç—å –≤ –∞–Ω–∫–µ—Ç–µ –±–∏–∑–Ω–µ—Å —É–≤–ª–µ—á–µ–Ω–∏—è –≤ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è')
                    ],
                    scope=types.BotCommandScopeChat(chat_id=call.from_user.id)
                )
            except:
                await bot.send_message(log_group,
                                       f'{datetime.datetime.now()} : \n–û–®–ò–ë–ö–ê.start.–ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é')
        else:
            try:
                await bot.set_my_commands(
                    commands=[
                        types.BotCommand('link', '–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç'),
                        types.BotCommand('help', '–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É'),
                        types.BotCommand('edit_fl', '–ò–∑–º–µ–Ω–∏—Ç—å –≤ –∞–Ω–∫–µ—Ç–µ –¥—Ä—É–∑—å—è —Ç–æ, —á—Ç–æ –Ω—Ä–∞–≤–∏—Ç—Å—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ'),
                        types.BotCommand('edit_flp', '–ò–∑–º–µ–Ω–∏—Ç—å –≤ –∞–Ω–∫–µ—Ç–µ –¥—Ä—É–∑—å—è —á–µ–º –ª—é–±–ª—é –∑–∞–Ω–∏–º–∞—Ç—å—Å—è'),
                        types.BotCommand('edit_fact', '–ò–∑–º–µ–Ω–∏—Ç—å –≤ –∞–Ω–∫–µ—Ç–µ –¥—Ä—É–∑—å—è —Ñ–∞–∫—Ç—ã –æ —Ä–∞–±–æ—Ç–µ')
                    ],
                    scope=types.BotCommandScopeChat(chat_id=call.from_user.id)
                )
            except:
                await bot.send_message(log_group,
                                       f'{datetime.datetime.now()} : \n–û–®–ò–ë–ö–ê.start.–ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é')
        if act == '0':

            await call.message.edit_reply_markup()
            if (int(lib.Query.getFieldByQuery('u', f'ei = {user_id}', 'business')) == 1):
                await call.message.answer(
                    f"–ö—Ä—É—Ç–æ! –¢—ã ‚Äì –∂–µ–º—á—É–∂–∏–Ω–∞ –Ω–∞—à–µ–≥–æ –¥–µ–ª–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞! –£–∂–µ –Ω–µ —Ç–µ—Ä–ø–∏—Ç—Å—è –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–±—è –¥—Ä—É–≥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º.")
            else:
                await call.message.answer(
                    f"–ö–∞–π—Ñ! –û—Ç —Ç–≤–æ–µ–π –∞–Ω–∫–µ—Ç—ã –Ω–µ –æ—Ç–æ—Ä–≤–∞—Ç—å—Å—è! –£–∂–µ –Ω–µ —Ç–µ—Ä–ø–∏—Ç—Å—è –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–±—è –¥—Ä—É–≥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —Å–æ–æ–±—â–µ—Å—Ç–≤–∞.")
                await asyncio.sleep(3)
            await call.message.answer(
                f"<b>–¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥</b> –Ω–∞—á–∞–ª—Å—è, —É —Ç–µ–±—è –µ—Å—Ç—å 2Ô∏è‚É£ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏ —á—Ç–æ–±—ã –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Å–µ—Ä–≤–∏—Å–æ–º –ø–æ–±–ª–∏–∂–µ, –∂–µ–ª–∞—é —É–¥–∞—á–∏ ‚úåÔ∏è",
                parse_mode=types.ParseMode.HTML)
            await asyncio.sleep(3)
            await call.message.answer(
                f"–î–æ–∂–¥–∏—Å—å <b>—á–µ—Ç–≤–µ—Ä–≥–∞</b>, –∏ —è –ø–æ–¥–±–µ—Ä—É —Ç–µ–±–µ –ø–∞—Ä—É –¥–ª—è –æ–±—â–µ–Ω–∏—è. \n–ö–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ–ª—É—á–∏—à—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞–ø–∏—à–∏ –ø–µ—Ä–≤—ã–º –∏ –¥–æ–≥–æ–≤–æ—Ä–∏—Å—å –æ <b>–≤—Å—Ç—Ä–µ—á–µ</b> –∏–ª–∏ <b>–≤–∏–¥–µ–æ—á–∞—Ç–µ</b>.\n" \
                f"–í—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏, <b>Let's meet</b> –±–æ—Ç, —Ç–≤–æ–π –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –∫ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–º—É –æ–∫—Ä—É–∂–µ–Ω–∏—é.\n\n–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª:\nhttps://t.me/+bztYAcGH3DcyNzli",
                parse_mode=types.ParseMode.HTML)
            await asyncio.sleep(3)
        else:
            await call.message.edit_reply_markup()
            await call.message.answer(f"–¢—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –æ—Ç–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É, –∏—Å–ø–æ–ª—å–∑—É—è –ú–µ–Ω—é.")
    elif action == "sup":
        user_id = int(call.data.split("_")[2])
        act = call.data.split("_")[3]
        await call.message.edit_reply_markup()
        if act == '0':
            await call.message.answer(f"–£ –í–∞—Å –∫—Ä—É—Ç–∞—è –∏–¥–µ—è! –•–æ—á—É –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å")
            # await call.message.edit_text(f"–•–æ—á–µ—à—å –±–æ–ª—å—à–µ –≤—Å—Ç—Ä–µ—á? –ü–æ–¥–ø–∏—à–∏—Å—å", reply_markup=get_keyboard_link(user_id))
            await call.message.answer(f"–•–æ—á–µ—à—å –±–æ–ª—å—à–µ –≤—Å—Ç—Ä–µ—á? –ü–æ–¥–ø–∏—à–∏—Å—å", reply_markup=get_keyboard_link(user_id))
        else:
            await call.message.answer(f"–í –¥—Ä—É–≥–æ–π —Ä–∞–∑")
            # await call.message.edit_text(
            #     f"–î–æ–∂–¥–∏—Å—å —á–µ—Ç–≤–µ—Ä–≥–∞, –∏ —è –ø–æ–¥–±–µ—Ä—É —Ç–µ–±–µ –ø–∞—Ä—É –¥–ª—è –æ–±—â–µ–Ω–∏—è. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ–ª—É—á–∏—à—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞–ø–∏—à–∏ –ø–µ—Ä–≤—ã–º –∏ –¥–æ–≥–æ–≤–æ—Ä–∏—Å—å –æ –≤—Å—Ç—Ä–µ—á–µ –∏–ª–∏ –≤–∏–¥–µ–æ—á–∞—Ç–µ.\n" \
            #     f"–í—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏, Let's meet –±–æ—Ç, —Ç–≤–æ–π –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –∫ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–º—É –æ–∫—Ä—É–∂–µ–Ω–∏—é.\n\n–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª:\nhttps://t.me/+bztYAcGH3DcyNzli")
            await call.message.answer(
                f"–î–æ–∂–¥–∏—Å—å —á–µ—Ç–≤–µ—Ä–≥–∞, –∏ —è –ø–æ–¥–±–µ—Ä—É —Ç–µ–±–µ –ø–∞—Ä—É –¥–ª—è –æ–±—â–µ–Ω–∏—è. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ–ª—É—á–∏—à—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞–ø–∏—à–∏ –ø–µ—Ä–≤—ã–º –∏ –¥–æ–≥–æ–≤–æ—Ä–∏—Å—å –æ –≤—Å—Ç—Ä–µ—á–µ –∏–ª–∏ –≤–∏–¥–µ–æ—á–∞—Ç–µ.\n" \
                f"–í—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏, Let's meet –±–æ—Ç, —Ç–≤–æ–π –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –∫ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–º—É –æ–∫—Ä—É–∂–µ–Ω–∏—é.\n\n–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª:\nhttps://t.me/+bztYAcGH3DcyNzli")
    elif action == "link":
        user_id = int(call.data.split("_")[2])
        # await call.message.edit_text(
        #     f"–û—Ç–ª–∏—á–Ω–æ, –∞ —á–µ—Ä–µ–∑ –∫–∞–∫—É—é –∏–º–µ–Ω–Ω–æ —Å–∏—Å—Ç–µ–º—É –ø—Ä–æ–∏–∑–æ—à–ª–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ?",
        #     reply_markup=get_keyboard_link_choose('r', user_id))
        await call.message.answer(
            f"–û—Ç–ª–∏—á–Ω–æ, –∞ —á–µ—Ä–µ–∑ –∫–∞–∫—É—é –∏–º–µ–Ω–Ω–æ —Å–∏—Å—Ç–µ–º—É –ø—Ä–æ–∏–∑–æ—à–ª–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ?",
            reply_markup=get_keyboard_link_choose('r', user_id))
    elif action == 'lch':
        act = call.data.split("_")[2]
        user_id = int(call.data.split("_")[3])
        step = call.data.split("_")[4]
        await call.message.edit_reply_markup()
        if act == '0':
            if step == 'r':
                idict = {'status': 'email', 'ei': user_id}
            else:
                idict = {'status': 'email1', 'ei': user_id}
            lib.Query.addRecordByQuery('u_status', idict)
            # act = call.data.split("_")[3]
            # await call.message.edit_text(
            #     f"<b>–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É!!!</b> \n–ü–æ–¥—Å–∫–∞–∂–∏ <b>email</b>, –ø–æ –∫–æ—Ç–æ—Ä—ã–º—É –ø—Ä–æ–∏–∑–æ—à–ª–∞ –ø–æ–¥–ø–∏—Å–∫–∞, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ —Ç–µ–±—è",
            #     parse_mode=types.ParseMode.HTML)
            await call.message.answer('–ü–∞—Ç—Ä–µ–æ–Ω')
            await call.message.answer(
                f"<b>–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É!!!</b> \n–ü–æ–¥—Å–∫–∞–∂–∏ <b>email</b>, –ø–æ –∫–æ—Ç–æ—Ä—ã–º—É –ø—Ä–æ–∏–∑–æ—à–ª–∞ –ø–æ–¥–ø–∏—Å–∫–∞, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ —Ç–µ–±—è",
                parse_mode=types.ParseMode.HTML)
        else:
            if step == 'r':
                idict = {'status': 'pay', 'ei': user_id}
            else:
                idict = {'status': 'pay1', 'ei': user_id}
            lib.Query.addRecordByQuery('u_status', idict)
            await call.message.answer('–ü–µ–π—Ñ–æ—Ä–º')
            # await call.message.edit_text(
            #     f"<b>–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É!!!</b> \n–ü–æ–¥—Å–∫–∞–∂–∏ <b>–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b> –≤ —Ñ–æ—Ä–º–∞—Ç–µ 7**********, –ø–æ –∫–æ—Ç–æ—Ä—ã–º—É –ø—Ä–æ–∏–∑–æ—à–ª–∞ –ø–æ–¥–ø–∏—Å–∫–∞, —á—Ç–æ–±—ã —è –º–æ–≥ –Ω–∞–π—Ç–∏ —Ç–µ–±—è",
            #     parse_mode=types.ParseMode.HTML)
            await call.message.answer(
                f"<b>–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É!!!</b> \n–ü–æ–¥—Å–∫–∞–∂–∏ <b>–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b> –≤ —Ñ–æ—Ä–º–∞—Ç–µ 7**********, –ø–æ –∫–æ—Ç–æ—Ä—ã–º—É –ø—Ä–æ–∏–∑–æ—à–ª–∞ –ø–æ–¥–ø–∏—Å–∫–∞, —á—Ç–æ–±—ã —è –º–æ–≥ –Ω–∞–π—Ç–∏ —Ç–µ–±—è",
                parse_mode=types.ParseMode.HTML)
            # pay
    elif action == "saturday":
        act = call.data.split("_")[2]
        user_id = call.from_user.id
        await call.message.edit_reply_markup()
        if act == '1':
            await call.message.answer(f"–î–∞, –º—ã –¥–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å –æ –≤—Å—Ç—Ä–µ—á–µ")
            # await call.message.edit_text(f"–û—Ç–ª–∏—á–Ω–æ! –ú–æ–∂–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏ –æ –≤—Å—Ç—Ä–µ—á–µ?",
            #                              reply_markup=get_keyboard_feedback())
            await call.message.answer(f"–û—Ç–ª–∏—á–Ω–æ! –ú–æ–∂–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏ –æ –≤—Å—Ç—Ä–µ—á–µ?",
                                      reply_markup=get_keyboard_feedback())
        else:
            await call.message.answer(f"–ù–µ—Ç, –ø–∞—Ä—Ç–Ω—ë—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
            # await call.message.edit_text(
            #     f"–û–∫–µ–π, –±—ã–≤–∞–µ—Ç. –°–µ–π—á–∞—Å –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞–π—Ç–∏ —Ç–µ–±–µ –µ—â—ë –æ–¥–Ω—É –ø–∞—Ä—É")  # ---------------------------ALARM LIST
            await call.message.answer(
                f"–û–∫–µ–π, –±—ã–≤–∞–µ—Ç. –°–µ–π—á–∞—Å –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞–π—Ç–∏ —Ç–µ–±–µ –µ—â—ë –æ–¥–Ω—É –ø–∞—Ä—É")
            u_f = lib.Query.getRecordsByQuery('u_business',
                                              f'ei != 0')  # –∑–∞–±–∏—Ä–∞–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∞–Ω–∫–µ—Ç–µ –±–∏–∑–Ω–µ—Å
            u = pd.DataFrame(u_f)
            idx_0 = u[pd.to_numeric(u["ei"], errors="coerce") == user_id].index
            tem_u = int(u.iloc[idx_0.to_list()[0]]['col_meet'])
            tem_u -= 1
            idict = {'meet': 0, 'col_meet': tem_u}
            lib.Query.updateRecordByQuery('u', idict, f'ei = {user_id}')
            if int(lib.Query.getFieldByQuery('u', f'ei = {user_id}', 'business')) == 1:
                await match_business(user_id)

            else:
                await match_friends(user_id)
    elif action == "feedback":
        act = int(call.data.split("_")[2])
        user_id = call.from_user.id
        u_f = lib.Query.getRecordsByQuery('u', f'ei != 0')  # –∑–∞–±–∏—Ä–∞–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        u = pd.DataFrame(u_f)
        idx = u[pd.to_numeric(u["ei"], errors="coerce") == user_id].index
        await call.message.edit_reply_markup()
        await call.message.answer(act)
        for el in idx:
            if int(u.at[el, "friends"]) == 1:
                u_match = lib.Query.getRecordsByQuery('my_match',
                                                      f'ei != 0')  # –∑–∞–±–∏—Ä–∞–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –º–∞—Ç—á–µ–π –¥—Ä—É–∑–µ–π
                tery = 'my_match'
            elif int(u.at[el, "business"]) == 1:
                u_match = lib.Query.getRecordsByQuery('my_match_b',
                                                      f'ei != 0')  # –∑–∞–±–∏—Ä–∞–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –º–∞—Ç—á–µ–π –±–∏–∑–Ω–µ—Å
                tery = 'my_match_b'
            t_match = pd.DataFrame(u_match)
            idx1 = t_match[pd.to_numeric(t_match["ei"], errors="coerce") == user_id].index
            idx2 = t_match[pd.to_numeric(t_match["ei2"], errors="coerce") == user_id].index
            if idx1.to_list():
                for el in idx1.to_list():
                    # t_match.at[el, 'score1'] = act
                    idict = {'score1': act}
                    lib.Query.updateRecordByQuery(f'{tery}', idict, f'ei = {user_id}')
            if idx2.to_list():
                for el in idx2.to_list():
                    idict = {'score2': act}
                    lib.Query.updateRecordByQuery(f'{tery}', idict, f'ei2 = {user_id}')
        # await call.message.edit_text(
        #     f"–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –æ—Å—Ç–∞–≤–∏–ª–æ —Ç–∞–∫–æ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ? (–ù–∞–ø–∏—à–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏–ª–∏ –Ω–∞–∂–º–∏ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å)",
        #     reply_markup=get_keyboard_feedback_pass(user_id))
        await call.message.answer(
            f"–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –æ—Å—Ç–∞–≤–∏–ª–æ —Ç–∞–∫–æ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ? (–ù–∞–ø–∏—à–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏–ª–∏ –Ω–∞–∂–º–∏ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å)",
            reply_markup=get_keyboard_feedback_pass(user_id))
        idict = {'status': 'feedback', 'ei': user_id}
        lib.Query.addRecordByQuery('u_status', idict)
    elif action == "pass":
        await call.message.edit_reply_markup()
        await call.message.answer('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å')
        user_id = int(call.data.split("_")[2])
        lib.Query.deleteRecordByQuery('u_status', f'ei = {user_id};')
        # await call.message.edit_text(f"–•–æ—á–µ—à—å –µ—â–µ –≤—Å—Ç—Ä–µ—á—É?", reply_markup=get_keyboard_want(user_id))
        await call.message.answer(f"–•–æ—á–µ—à—å –µ—â–µ –≤—Å—Ç—Ä–µ—á—É?", reply_markup=get_keyboard_want(user_id))
    elif action == "want":
        await call.message.edit_reply_markup()
        await call.message.answer('–•–æ—á—É –µ—â—ë!')
        user_id = int(call.data.split("_")[2])
        if int(lib.Query.checkCountByQuery('u_fee', f'ei = {user_id}')) > 0:
            u_fee = lib.Query.getRecordByQuery('u_fee', f'ei = {user_id}')  # –∑–∞–±–∏—Ä–∞–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            u_f = lib.Query.getRecordByQuery('u', f'ei = {user_id}')
            # if u_fee['tariff'] == 1 or u_fee['tariff'] == 2 or u_fee['tariff'] == 9:
            if int(u_fee['tariff']) != 9:
                if int(u_fee['tariff']) > int(u_f['col_meet']):
                    # await call.message.edit_text(f"–•–æ—Ä–æ—à–æ, —Å –∫–µ–º —Ö–æ—á–µ—à—å –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è –Ω–∞ —ç—Ç–æ—Ç —Ä–∞–∑?",
                    #                              reply_markup=get_keyboard_more(user_id))
                    await call.message.answer(f"–•–æ—Ä–æ—à–æ, —Å –∫–µ–º —Ö–æ—á–µ—à—å –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è –Ω–∞ —ç—Ç–æ—Ç —Ä–∞–∑?",
                                              reply_markup=get_keyboard_more(user_id))
                else:
                    # await call.message.edit_text(f"–•–æ—á–µ—à—å –±–æ–ª—å—à–µ –≤—Å—Ç—Ä–µ—á? –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à pat –∏–ª–∏ pay",
                    #                              reply_markup=get_keyboard_wantmore(user_id))
                    await call.message.answer(f"–•–æ—á–µ—à—å –±–æ–ª—å—à–µ –≤—Å—Ç—Ä–µ—á? –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à pat –∏–ª–∏ pay",
                                              reply_markup=get_keyboard_wantmore(user_id))
            else:
                # await call.message.edit_text(f"–•–æ—Ä–æ—à–æ, —Å –∫–µ–º —Ö–æ—á–µ—à—å –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è –Ω–∞ —ç—Ç–æ—Ç —Ä–∞–∑?",
                #                              reply_markup=get_keyboard_more(user_id))
                await call.message.answer(f"–•–æ—Ä–æ—à–æ, —Å –∫–µ–º —Ö–æ—á–µ—à—å –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è –Ω–∞ —ç—Ç–æ—Ç —Ä–∞–∑?",
                                          reply_markup=get_keyboard_more(user_id))
    elif action == "wantmore":
        act = call.data.split("_")[2]
        user_id = int(call.data.split("_")[3])
        await call.message.edit_reply_markup()
        if act == '1':
            await call.message.answer('–•–æ—á—É –±–æ–ª—å—à–µ –≤—Å—Ç—Ä–µ—á!')
            # await call.message.edit_text(f"–•–æ—á–µ—à—å –±–æ–ª—å—à–µ –≤—Å—Ç—Ä–µ—á? –ü–æ–¥–ø–∏—à–∏—Å—å", reply_markup=get_keyboard_link1(user_id))
            await call.message.answer(f"–•–æ—á–µ—à—å –±–æ–ª—å—à–µ –≤—Å—Ç—Ä–µ—á? –ü–æ–¥–ø–∏—à–∏—Å—å", reply_markup=get_keyboard_link1(user_id))
        else:
            await call.message.answer('–ë—É–¥—É –≤—Å—Ç—Ä–µ—á–∞—Ç—å—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é')
            # await call.message.edit_text(
            #     f"–î–æ–∂–¥–∏—Å—å —á–µ—Ç–≤–µ—Ä–≥–∞, –∏ —è –ø–æ–¥–±–µ—Ä—É —Ç–µ–±–µ –ø–∞—Ä—É –¥–ª—è –æ–±—â–µ–Ω–∏—è. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ–ª—É—á–∏—à—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞–ø–∏—à–∏ –ø–µ—Ä–≤—ã–º –∏ –¥–æ–≥–æ–≤–æ—Ä–∏—Å—å –æ –≤—Å—Ç—Ä–µ—á–µ –∏–ª–∏ –≤–∏–¥–µ–æ—á–∞—Ç–µ.\n" \
            #     f"–í—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏, Let's meet –±–æ—Ç, —Ç–≤–æ–π –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –∫ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–º—É –æ–∫—Ä—É–∂–µ–Ω–∏—é.\n\n–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª:\nhttps://t.me/+bztYAcGH3DcyNzli")
            await call.message.answer(
                f"–î–æ–∂–¥–∏—Å—å —á–µ—Ç–≤–µ—Ä–≥–∞, –∏ —è –ø–æ–¥–±–µ—Ä—É —Ç–µ–±–µ –ø–∞—Ä—É –¥–ª—è –æ–±—â–µ–Ω–∏—è. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ–ª—É—á–∏—à—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞–ø–∏—à–∏ –ø–µ—Ä–≤—ã–º –∏ –¥–æ–≥–æ–≤–æ—Ä–∏—Å—å –æ –≤—Å—Ç—Ä–µ—á–µ –∏–ª–∏ –≤–∏–¥–µ–æ—á–∞—Ç–µ.\n" \
                f"–í—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏, Let's meet –±–æ—Ç, —Ç–≤–æ–π –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –∫ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–º—É –æ–∫—Ä—É–∂–µ–Ω–∏—é.\n\n–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª:\nhttps://t.me/+bztYAcGH3DcyNzli")
    elif action == "link1":
        await call.message.edit_reply_markup()
        user_id = int(call.data.split("_")[2])
        # await call.message.edit_text(
        #     f"–û—Ç–ª–∏—á–Ω–æ, –∞ —á–µ—Ä–µ–∑ –∫–∞–∫—É—é –∏–º–µ–Ω–Ω–æ —Å–∏—Å—Ç–µ–º—É –ø—Ä–æ–∏–∑–æ—à–ª–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ?",
        #     reply_markup=get_keyboard_link_choose('m', user_id))
        await call.message.answer(
            f"–û—Ç–ª–∏—á–Ω–æ, –∞ —á–µ—Ä–µ–∑ –∫–∞–∫—É—é –∏–º–µ–Ω–Ω–æ —Å–∏—Å—Ç–µ–º—É –ø—Ä–æ–∏–∑–æ—à–ª–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ?",
            reply_markup=get_keyboard_link_choose('m', user_id))
    elif action == "link2":
        await call.message.edit_reply_markup()
        user_id = int(call.data.split("_")[2])
        # await call.message.edit_text(f"–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –º–æ–∂–Ω–æ —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º",
        #                              reply_markup=get_keyboard_link(user_id))
        await call.message.answer(f"–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –º–æ–∂–Ω–æ —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º",
                                  reply_markup=get_keyboard_link(user_id))
    elif action == "more":
        await call.message.edit_reply_markup()
        act = call.data.split("_")[2]
        user_id = int(call.data.split("_")[3])
        idict = {'meet': 0}
        lib.Query.updateRecordByQuery('u', idict, f'ei = {user_id}')
        if act == '1':
            await call.message.answer('–ù–∞–π—Ç–∏ –¥—Ä—É–∑–µ–π üö¥‚Äç‚ôÇ')
            if int(lib.Query.getFieldByQuery('u', f'ei = {user_id}', 'friends')) == 1:
                # await call.message.edit_text(f'–•–æ—Ä–æ—à–æ, —Å–µ–π—á–∞—Å –Ω–∞–π–¥—É —Ç–µ–±–µ –ø–∞—Ä—É')
                await call.message.answer(f'–•–æ—Ä–æ—à–æ, —Å–µ–π—á–∞—Å –Ω–∞–π–¥—É —Ç–µ–±–µ –ø–∞—Ä—É')
                await match_friends(user_id)
                # pass # ----------------------------------------------------–ò–©–ï–ú –ü–ê–†–£ –ü–û –î–†–£–ó–¨–Ø–ú
            else:
                # await call.message.edit_text(f'–ù–µ –Ω–∞—à—ë–ª –∞–Ω–∫–µ—Ç—É –ø–æ –Ω–∞–ø—Ä–≤–ª–µ–Ω–∏—é –ø–æ–∏—Å–∫–∞ –¥—Ä—É–∑–µ–π. –°–µ–π—á–∞—Å –º–æ–∂–µ–º –∑–∞–ø–æ–ª–Ω–∏—Ç—å. '
                #                              f'–û—Ç–º–µ—Ç—å 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–æ—Å—É–≥–∞, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±–µ –Ω—Ä–∞–≤—è—Ç—Å—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ',
                #                              reply_markup=get_keyboard_friends_leisure(user_id, 'fl', 'm'))
                await call.message.answer(f'–ù–µ –Ω–∞—à—ë–ª –∞–Ω–∫–µ—Ç—É –ø–æ –Ω–∞–ø—Ä–≤–ª–µ–Ω–∏—é –ø–æ–∏—Å–∫–∞ –¥—Ä—É–∑–µ–π. –°–µ–π—á–∞—Å –º–æ–∂–µ–º –∑–∞–ø–æ–ª–Ω–∏—Ç—å. '
                                          f'–û—Ç–º–µ—Ç—å 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–æ—Å—É–≥–∞, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±–µ –Ω—Ä–∞–≤—è—Ç—Å—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ',
                                          reply_markup=get_keyboard_friends_leisure(user_id, 'fl', 'm'))
                # pass # ---------------- –ó–∞–ø–æ–ª–Ω—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ –∞–Ω–∫–µ—Ç–µ –¥—Ä—É–∑–µ–π –∏ —Å—Ä–∞–∑—É –≤—ã–¥–∞—ë–º –ø–∞—Ä—É –ø–æ –∏—Ç–æ–≥—É
        else:
            await call.message.answer('–†–∞—Å—à–∏—Ä–∏—Ç—å —Å–µ—Ç—å –¥–µ–ª–æ–≤—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤  üí∂‚ôÇ')
            if int(lib.Query.getFieldByQuery('u', f'ei = {user_id}', 'business')) == 1:
                await call.answer()
                # await call.message.edit_text(f'–•–æ—Ä–æ—à–æ, —Å–µ–π—á–∞—Å –Ω–∞–π–¥—É —Ç–µ–±–µ –ø–∞—Ä—É')
                await call.message.answer(f'–•–æ—Ä–æ—à–æ, —Å–µ–π—á–∞—Å –Ω–∞–π–¥—É —Ç–µ–±–µ –ø–∞—Ä—É')
                await match_business(user_id)
                # pass # ---------------------------------------------–ò–©–ï–ú –ü–ê–†–£ –ü–û –ë–ò–ó–ù–ï–°–£
            else:
                # await call.message.edit_text \
                #     (f'–ù–µ –Ω–∞—à—ë–ª –∞–Ω–∫–µ—Ç—É –ø–æ –Ω–∞–ø—Ä–≤–ª–µ–Ω–∏—é –ø–æ–∏—Å–∫–∞ –±–∏–∑–Ω–µ—Å –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤. –°–µ–π—á–∞—Å –º–æ–∂–µ–º –∑–∞–ø–æ–ª–Ω–∏—Ç—å. '
                #      f'–†–∞—Å—Å–∫–∞–∂–∏, —á–µ–º —Ç—ã —Å–µ–π—á–∞—Å –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è?', reply_markup=get_keyboard_business(user_id, 'm'))
                await call.message.answer \
                    (f'–ù–µ –Ω–∞—à—ë–ª –∞–Ω–∫–µ—Ç—É –ø–æ –Ω–∞–ø—Ä–≤–ª–µ–Ω–∏—é –ø–æ–∏—Å–∫–∞ –±–∏–∑–Ω–µ—Å –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤. –°–µ–π—á–∞—Å –º–æ–∂–µ–º –∑–∞–ø–æ–ª–Ω–∏—Ç—å. '
                     f'–†–∞—Å—Å–∫–∞–∂–∏, —á–µ–º —Ç—ã —Å–µ–π—á–∞—Å –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è?', reply_markup=get_keyboard_business(user_id, 'm'))
                # pass # --------------------- –ó–∞–ø–æ–ª–Ω—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ –∞–Ω–∫–µ—Ç–µ –±–∏–∑–Ω–µ—Å–∞ –∏ —Å—Ä–∞–∑—É –≤—ã–¥–∞—ë–º –ø–∞—Ä—É –ø–æ –∏—Ç–æ–≥—É
    elif action == "wed":
        await call.message.edit_reply_markup()
        act = call.data.split("_")[2]
        user_id = int(call.data.split("_")[3])
        idict = {'week': int(act)}
        lib.Query.updateRecordByQuery('u', idict, f'ei = {user_id}')
        if act == '0':
            await call.message.answer(f'–ù–µ—Ç')
            await call.message.answer(f'–•–æ—Ä–æ—à–æ! –ù–∞–ø–∏—à—É —Ç–µ–±–µ —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª')
            # await call.message.edit_text(f'–•–æ—Ä–æ—à–æ! –ù–∞–ø–∏—à—É —Ç–µ–±–µ —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é!')
        else:
            await call.message.answer(f'–î–∞')
            t_sit_us = lib.Query.getFieldByQuery('u', f'ei = {user_id}', 'sity')
            if str(t_sit_us) != '–ë–∞—Ç—É–º–∏' or str(t_sit_us) != '–¢–±–∏–ª–∏—Å–∏':
                # await call.message.edit_text(f'–í –∫–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —ç—Ç—É –≤—Å—Ç—Ä–µ—á—É?',
                #                              reply_markup=get_keyboard_wedonline(user_id))
                await call.message.answer(f'–í –∫–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —ç—Ç—É –≤—Å—Ç—Ä–µ—á—É?',
                                          reply_markup=get_keyboard_wedonline(user_id))
            else:
                # await call.message.edit_text(f'–û—Ç–ª–∏—á–Ω–æ!üëç\n–ù–∞–ø–∏—à—É —Ç–µ–±–µ –≤ —á–µ—Ç–≤–µ—Ä–≥.')
                await call.message.answer(f'–û—Ç–ª–∏—á–Ω–æ!üëç\n–ù–∞–ø–∏—à—É —Ç–µ–±–µ –≤ —á–µ—Ç–≤–µ—Ä–≥.')
    elif action == "wedo":
        await call.message.edit_reply_markup()
        act = call.data.split("_")[2]
        user_id = int(call.data.split("_")[3])
        if act == '0':
            await call.message.answer(f'–û–Ω–ª–∞–π–Ω')
            # await call.message.edit_text(f'–û—Ç–ª–∏—á–Ω–æ!üëç\n–ù–∞–ø–∏—à—É —Ç–µ–±–µ –≤ —á–µ—Ç–≤–µ—Ä–≥.')
            await call.message.answer(f'–û—Ç–ª–∏—á–Ω–æ!üëç\n–ù–∞–ø–∏—à—É —Ç–µ–±–µ –≤ —á–µ—Ç–≤–µ—Ä–≥.')
        else:
            await call.message.answer(f'–û—Ñ–ª–∞–π–Ω')
            # await call.message.edit_text(f'–ò–∑ –∫–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –∏—â–µ–º?',
            #                              reply_markup=get_keyboard_wedsity(user_id))
            await call.message.answer(f'–ò–∑ –∫–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –∏—â–µ–º?',
                                      reply_markup=get_keyboard_wedsity(user_id))
    elif action == "ws":
        await call.message.edit_reply_markup()
        act = call.data.split("_")[2]
        await call.message.answer(act)
        user_id = int(call.data.split("_")[3])
        idict = {'sity': act}
        lib.Query.updateRecordByQuery('u', idict, f'ei = {user_id}')
        # await call.message.edit_text(f'–û—Ç–ª–∏—á–Ω–æ!üëç\n–ù–∞–ø–∏—à—É —Ç–µ–±–µ –≤ —á–µ—Ç–≤–µ—Ä–≥.')
        await call.message.answer(f'–û—Ç–ª–∏—á–Ω–æ!üëç\n–ù–∞–ø–∏—à—É —Ç–µ–±–µ –≤ —á–µ—Ç–≤–µ—Ä–≥.')
    elif action == 'canf':
        await call.message.edit_reply_markup()
        await call.message.answer(f'–û—Ç–º–µ–Ω–∞')
        user_id = call.data.split("_")[2]
        lib.Query.deleteRecordByQuery('u_status', f'ei = {user_id};')
        await call.message.edit_text(f'–í—Å—ë –æ–∫, –≤—ã—à–µ–ª –∏–∑ —Ä–µ–∂–∏–º–∞ –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏')
        await call.message.answer(f'–í—Å—ë –æ–∫, –≤—ã—à–µ–ª –∏–∑ —Ä–µ–∂–∏–º–∞ –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏')
    elif action == "p":
        act = call.data.split("_")[2]
        step = call.data.split("_")[3]
        user_id = call.data.split("_")[4]
        user_email = call.data.split("_")[5]
        if act == '0':
            await bot.send_message(user_id,
                                   f'–ü—Ä–∏–≤–µ—Ç, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –Ω–µ –Ω–∞—à–ª–∏ –¥–µ–π—Å—Ç–≤—É—é—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É email/—Ç–µ–ª–µ—Ñ–æ–Ω—É: {user_email}. ' \
                                   f'–ü—Ä–æ—Å—å–±–∞ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, –≤ —Å–ª—É—á–∞–µ –Ω–∞–ª–∏—á–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ')
            # await call.message.edit_text(
            #     f'–í–∞—Å –ø–æ–Ω—è–ª, –Ω–∞–ø–∏—Å–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –±—ã–ª–∞ –Ω–∞–π–¥–µ–Ω–∞ —Å –ø—Ä–æ—Å—å–±–æ–π –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é, –ª–∏–±–æ —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π')
            await call.message.answer(
                f'–í–∞—Å –ø–æ–Ω—è–ª, –Ω–∞–ø–∏—Å–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –±—ã–ª–∞ –Ω–∞–π–¥–µ–Ω–∞ —Å –ø—Ä–æ—Å—å–±–æ–π –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é, –ª–∏–±–æ —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π')
        else:
            idict = {'ei': user_id, 'email': user_email, 'tariff': act}
            lib.Query.updateRecordByQuery('u_fee', idict, f'ei = {user_id}')
            idict1 = {'ei': user_id, 'col_meet': 0}
            lib.Query.updateRecordByQuery('u', idict1, f'ei = {user_id}')
            # await call.message.edit_text(f'–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, –¥–∞–Ω–Ω—ã–µ –≤ —Å–∏—Å—Ç–µ–º–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã')
            await call.message.answer(f'–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, –¥–∞–Ω–Ω—ã–µ –≤ —Å–∏—Å—Ç–µ–º–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã')
            if step != 'r':
                await bot.send_message(user_id, f'–ü—Ä–∏–≤–µ—Ç, –ø–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, —Å–µ–π—á–∞—Å –Ω–∞–π–¥—É —Ç–µ–±–µ –Ω–æ–≤—É—é –ø–∞—Ä—É')
                if int(lib.Query.getFieldByQuery('u', f'ei = {user_id}', 'business')) == 1:
                    await match_business(user_id)
                elif int(lib.Query.getFieldByQuery('u', f'ei = {user_id}', 'friends')) == 1:
                    await match_friends(user_id)
    await call.answer()


# —Ñ—É–Ω–∫—Ü–∏—è –≤–µ–¥–µ–Ω–∏—è –±–∞–∑—ã –ª—é–¥–µ–π, –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö —Å –±–æ—Ç–æ–º
@dp.message_handler(commands="start")
async def start(message: types.Message):
    try:
        print(message.from_user.id)
        await message.delete()
        user_id = int(message.from_user.id)
        o_user = lib.Query.checkCountByQuery('u', f'ei = {user_id}')
        if o_user == 0:
            user_username = message.from_user.username
            user_first_name = message.from_user.first_name
            idict = {'ei': user_id, 'external_username': f'{user_username}',
                     'first_name': f'{user_first_name}'}
            lib.Query.addRecordByQuery('u', idict)
            await message.answer(
                f"###########",
                reply_markup=get_keyboard_new_user(user_id), parse_mode=types.ParseMode.HTML)
        else:
            ttemp = lib.Query.getFieldByQuery('u', f'ei = {user_id}', 'blocked')
            if ttemp == 0:
                await message.answer(
                    f'–ú—ã —Å —Ç–æ–±–æ–π —É–∂–µ –∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å! –ï—Å–ª–∏ —Ç—ã –∑–∞–±—ã–ª –º–µ–Ω—è, –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, —è –Ω–µ –æ–±–∏–¥–µ–ª—Å—è :) –ê –µ—Å–ª–∏ —Ç—ã —Å–¥–µ–ª–∞–ª —ç—Ç–æ –Ω–∞—Ä–æ—á–Ω–æ ‚Äì –Ω–µ –¥–µ–ª–∞–π —Ç–∞–∫ –±–æ–ª—å—à–µ. –ò–Ω–∞—á–µ –º–Ω–µ –ø—Ä–∏–¥—ë—Ç—Å—è —Ç–µ–±—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å.')
                await message.bot.send_message(log_group, f"{datetime.datetime.now()} :\n[info] –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "
                                                          f"@{message.from_user.username}, —É–∂–µ –∑–∞—Ä–µ–≥–∞–Ω",
                                               reply_markup=get_keyboard_ban(int(message.from_user.id)))
            else:
                await message.answer(
                    f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç—ã –±—ã–ª(–∞) –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω(–∞). –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–æ –æ—à–∏–±–æ—á–Ω–æ - –ø—Ä–æ—Å—å–±–∞ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø—Ä–æ–µ–∫—Ç–∞')
                await message.bot.send_message(log_group,
                                               f"{datetime.datetime.now()} :\n[info] –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} –ø—ã—Ç–∞–ª—Å—è –Ω–∞–∂–∞—Ç—å /start"
                                               f", –Ω–æ —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω",
                                               reply_markup=get_keyboard_unban(int(message.from_user.id)))
    except:
        await message.answer(
            '–ú–∞–º–∞ –º–∏—è!üò∞ –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ù–æ —è —É–∂–µ —Å–æ–æ–±—â–∏–ª —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –æ–± –æ—à–∏–±–∫–µ, —Å–∫–æ—Ä–æ –≤—Å—ë —É–ª–∞–¥–∏–º.')
        await bot.send_message(log_group,
                               f'{datetime.datetime.now()} : \n–û–®–ò–ë–ö–ê.start —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{message.from_user.username}')


# –∫–æ–º–∞–Ω–¥–∞ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç
@dp.message_handler(commands="link")
async def fl(message: types.Message):
    await message.delete()
    user_id = int(message.from_user.id)
    await message.answer('–•–æ—á–µ—à—å –±–æ–ª—å—à–µ –≤—Å—Ç—Ä–µ—á? –ü–æ–¥–ø–∏—à–∏—Å—å', reply_markup=get_keyboard_link(user_id))


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –û–¢–ú–ï–ù–ê
def get_keyboard_cancel(id):
    buttons = [
        types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"num_cancel_{id}")
    ]
    keyboard_cancel = types.InlineKeyboardMarkup(row_width=1)
    keyboard_cancel.add(*buttons)
    return keyboard_cancel


# –∫–æ–º–∞–Ω–¥–∞ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
@dp.message_handler(commands="help")
async def fl(message: types.Message):
    await message.delete()
    user_id = int(message.from_user.id)
    idict = {'status': 'help', 'ei': user_id}
    lib.Query.addRecordByQuery('u_status', idict)
    await message.answer('–ú–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∞ —è –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ –≤ —Ç–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫—É, –ø–æ—Å–ª–µ —á–µ–≥–æ –ø–µ—Ä–µ—à–ª—é –æ—Ç–≤–µ—Ç',
                         reply_markup=get_keyboard_cancel(user_id))


# —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
@dp.message_handler(commands="fl")
async def fl(message: types.Message):
    await message.delete()
    await message.answer('–í—ã–±–µ—Ä–∏ —Ç—Ä–∏ —Å–≤–æ–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–∞',
                         reply_markup=get_keyboard_friends_leisure(int(message.from_user.id)))


# —Ñ—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞
@dp.message_handler(commands="edit_sity")
async def fl(message: types.Message):
    await message.delete()
    user_id = int(message.from_user.id)
    await message.answer('–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ —Ç—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –±–æ–ª—å—à—É—é —á–∞—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏? ',
                         reply_markup=get_keyboard_sity(user_id, 'e'))


# —Ñ—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —è–∑—ã–∫–æ–≤
@dp.message_handler(commands="edit_lang")
async def fl(message: types.Message):
    await message.delete()
    user_id = int(message.from_user.id)
    await message.answer('–°–µ–π—á–∞—Å —É —Ç–µ–±—è –≤—ã–±—Ä–∞–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —è–∑—ã–∫–∏. –ú–æ–∂–µ—à—å –∫–∞–∫–æ–π —Ç–æ —É–±—Ä–∞—Ç—å –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å ',
                         reply_markup=get_keyboard_lang(user_id, 'e'))


# —Ñ—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
@dp.message_handler(commands="edit_bday")
async def fl(message: types.Message):
    await message.delete()
    user_id = int(message.from_user.id)
    await message.answer('–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –ø–æ–º–µ–Ω—è—Ç—å —Ç–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è. –ö–∞–∫–æ–≥–æ —Ç—ã –≥–æ–¥–∞?',
                         reply_markup=get_keyboard_year(user_id, 'e'))


# —Ñ—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–ª–µ—á–µ–Ω–∏–π
@dp.message_handler(commands="edit_fl")
async def fl(message: types.Message):
    await message.delete()
    user_id = int(message.from_user.id)
    await message.answer(
        '–°–µ–π—á–∞—Å —É —Ç–µ–±—è –≤—ã–±—Ä–∞–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —É–≤–ª–µ—á–µ–Ω–∏—è. –ú–∞–∫—Å–∏–º—É–º –º–æ–∂–µ—Ç –±—ã—Ç—å 3, –ø–æ—ç—Ç–æ–º—É –ø—Ä–µ–∂–¥–µ —á–µ–º —á—Ç–æ —Ç–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω—É–∂–Ω–æ —á—Ç–æ —Ç–æ —É–±—Ä–∞—Ç—å',
        reply_markup=get_keyboard_friends_leisure(user_id, 'fl', 'e'))


# —Ñ—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–ª–µ—á–µ–Ω–∏–π2
@dp.message_handler(commands="edit_flp")
async def fl(message: types.Message):
    await message.delete()
    user_id = int(message.from_user.id)
    await message.answer(
        '–°–µ–π—á–∞—Å —É —Ç–µ–±—è –≤—ã–±—Ä–∞–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —É–≤–ª–µ—á–µ–Ω–∏—è. –ú–∞–∫—Å–∏–º—É–º –º–æ–∂–µ—Ç –±—ã—Ç—å 3, –ø–æ—ç—Ç–æ–º—É –ø—Ä–µ–∂–¥–µ —á–µ–º —á—Ç–æ —Ç–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω—É–∂–Ω–æ —á—Ç–æ —Ç–æ —É–±—Ä–∞—Ç—å',
        reply_markup=get_keyboard_friends_leisure_plus(user_id, 'e'))


# —Ñ—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–∫—Ç–æ–≤
@dp.message_handler(commands="edit_fact")
async def fl(message: types.Message):
    await message.delete()
    user_id = int(message.from_user.id)
    await message.answer('–•–æ—Ä–æ—à–æ, –¥–æ–±–∞–≤—å –ø–∞—Ä—É —Å–ª–æ–≤ –æ —Ä–∞–±–æ—Ç–µ')
    idict = {'status': 'free_time', 'ei': user_id}
    lib.Query.addRecordByQuery('u_status', idict)


# —Ñ—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ–º —Ç—ã —Å–µ–π—á–∞—Å –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è
@dp.message_handler(commands="edit_deal")
async def fl(message: types.Message):
    await message.delete()
    user_id = int(message.from_user.id)
    await message.answer('–ú–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Ä–æ–¥ –∑–∞–Ω—è—Ç–∏–π', reply_markup=get_keyboard_business(user_id, 'e'))


# —Ñ—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–±–µ—Ä–∏ —Ç—Ä–∏ —Å—Ñ–µ—Ä—ã –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
@dp.message_handler(commands="edit_sector")
async def fl(message: types.Message):
    await message.delete()
    user_id = int(message.from_user.id)
    await message.answer(
        '–°–µ–π—á–∞—Å —É —Ç–µ–±—è –≤—ã–±—Ä–∞–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —Å—Ñ–µ—Ä—ã. –ú–∞–∫—Å–∏–º—É–º –º–æ–∂–µ—Ç –±—ã—Ç—å 3, –ø–æ—ç—Ç–æ–º—É –ø—Ä–µ–∂–¥–µ —á–µ–º —á—Ç–æ —Ç–æ –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω–æ –ø–µ—Ä–≤–æ–µ —É–±—Ä–∞—Ç—å',
        reply_markup=get_keyboard_business_sector(user_id, 'sect', 'e'))


# —Ñ—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–∫—Ç–æ–≤
@dp.message_handler(commands="edit_deal_fact")
async def fl(message: types.Message):
    await message.delete()
    user_id = int(message.from_user.id)
    await message.answer('–•–æ—Ä–æ—à–æ, —Ä–∞—Å—Å–∫–∞–∂–∏ –ø–∞—Ä—É —Å–ª–æ–≤ –æ —Ç–æ–º, —á–µ–º –≥–æ—Ä–¥–∏—à—å—Å—è')
    idict = {'status': 'editdeal', 'ei': user_id}
    lib.Query.addRecordByQuery('u_status', idict)


# —Ñ—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
@dp.message_handler(commands="edit_contact")
async def fl(message: types.Message):
    await message.delete()
    user_id = int(message.from_user.id)
    await message.answer(
        '–°–µ–π—á–∞—Å —É —Ç–µ–±—è –≤—ã–±—Ä–∞–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —Ü–µ–ª–∏ –∫–æ–Ω—Ç–∞–∫–æ–≤. –ú–∞–∫—Å–∏–º—É–º –º–æ–∂–µ—Ç –±—ã—Ç—å 2, –ø–æ—ç—Ç–æ–º—É –ø—Ä–µ–∂–¥–µ —á–µ–º —á—Ç–æ —Ç–æ –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω–æ —á—Ç–æ-—Ç–æ —É–±—Ä–∞—Ç—å',
        reply_markup=get_keyboard_business_contact(user_id, 'e'))


# —Ñ—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–±–µ—Ä–∏ —Ç—Ä–∏ —Å—Ñ–µ—Ä—ã —Å –∫–∞–∫–æ–π –±—ã —Ö–æ—Ç–µ–ª —Å–≤—è–∑–∞—Ç—å —Å–≤–æ—é –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å
@dp.message_handler(commands="edit_sector2")
async def fl(message: types.Message):
    await message.delete()
    user_id = int(message.from_user.id)
    await message.answer(
        '–°–µ–π—á–∞—Å —É —Ç–µ–±—è –≤—ã–±—Ä–∞–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —Å—Ñ–µ—Ä—ã. –ú–∞–∫—Å–∏–º—É–º –º–æ–∂–µ—Ç –±—ã—Ç—å 3, –ø–æ—ç—Ç–æ–º—É –ø—Ä–µ–∂–¥–µ —á–µ–º —á—Ç–æ —Ç–æ –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω–æ –ø–µ—Ä–≤–æ–µ —É–±—Ä–∞—Ç—å',
        reply_markup=get_keyboard_business_sector(user_id, 'sect2', 'e'))


# —Ñ—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ —É–≤–ª–µ—á–µ–Ω–∏—è –≤ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è
@dp.message_handler(commands="edit_bl")
async def fl(message: types.Message):
    await message.delete()
    user_id = int(message.from_user.id)
    await message.answer(
        '–°–µ–π—á–∞—Å —É —Ç–µ–±—è –≤—ã–±—Ä–∞–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —É–≤–ª–µ—á–µ–Ω–∏—è. –ú–∞–∫—Å–∏–º—É–º –º–æ–∂–µ—Ç –±—ã—Ç—å 3, –ø–æ—ç—Ç–æ–º—É –ø—Ä–µ–∂–¥–µ —á–µ–º —á—Ç–æ —Ç–æ –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω–æ —á—Ç–æ-—Ç–æ —É–±—Ä–∞—Ç—å',
        reply_markup=get_keyboard_friends_leisure(user_id, 'bl', 'e'))


async def tempo(id):
    print(id)


# @dp.message_handler(commands="match_business")
async def match_business(usertemp=None):
    ############


async def match_friends(usertemp=None):
    ############


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_keyboard_test(id):
    buttons = [
        types.InlineKeyboardButton(text="–ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É", url=f"tg://user?id={id}")
    ]
    keyboard_fin = types.InlineKeyboardMarkup(row_width=1)
    keyboard_fin.add(*buttons)
    return keyboard_fin


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ —Å—Ä–µ–¥—É
def get_keyboard_wednesday(id):
    buttons = [
        types.InlineKeyboardButton(text="–î–∞", callback_data=f"num_wed_1_{id}"),
        types.InlineKeyboardButton(text="–ù–µ—Ç", callback_data=f"num_wed_0_{id}")
    ]
    keyboard_wednesday = types.InlineKeyboardMarkup(row_width=2)
    keyboard_wednesday.add(*buttons)
    return keyboard_wednesday


async def saturday():
    u_f = lib.Query.getRecordsByQuery('u', f'ei != 0')  # –∑–∞–±–∏—Ä–∞–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    u = pd.DataFrame(u_f)
    idx = u[pd.to_numeric(u["meet"], errors="coerce") == 1].index
    for el in idx:
        try:
            await bot.send_message(int(u.at[el, "ei"]), f'–£–¥–∞–ª–æ—Å—å –¥–æ–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è –æ –≤—Å—Ç—Ä–µ—á–µ?',
                                   reply_markup=get_keyboard_saturday())
        except:
            await bot.send_message(log_group,
                                   f'{datetime.datetime.now()} : \n[error] –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {int(u.at[el, "ei"])}')
    idict = {'meet': 0, 'week': 0}
    lib.Query.updateRecordByQuery('u', idict, f'friends = 1')
    lib.Query.updateRecordByQuery('u', idict, f'business = 1')


async def no_limit():
    await asyncio.sleep(1)


async def wednesday():
    #############


# —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è ID
@dp.message_handler(commands="id")
async def id(message: types.Message):
    await message.answer(f'You\'r id: {message.chat.id}', reply_markup=types.ReplyKeyboardRemove())
    await message.bot.send_message(log_group,
                                   f'{datetime.datetime.now()} : \n[info] –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª id')


# —Ç–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è
@dp.message_handler(commands="test")
async def test(message: types.Message):
    await message.bot.send_message(log_group,
                                   f'{datetime.datetime.now()} : \n[info] –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É test')


# —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
@dp.message_handler(commands="chat_support")
async def chat_support(message: types.Message):
    chat_id = message.chat.id
    tempo = int(lib.Query.checkCountByQuery('c', f'name = "chat_support"'))
    print(tempo)
    if tempo == 0:
        idict = {'name': 'chat_support', 'chat_id': chat_id}
        lib.Query.addRecordByQuery('c', idict)
        await message.answer(f'–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏')
    else:
        idict = {'name': 'chat_support', 'chat_id': chat_id}
        lib.Query.updateRecordByQuery('c', idict, f'name = "chat_support"')
        await message.answer(f'–£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–∏–ª —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏')


# –Ω–∏–∂–µ –ø—É–ª —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥, —á—Ç–æ–±—ã —É—Å–∫–æ—Ä–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã –∏–ª–∏ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
@dp.message_handler(commands="lm_wednesday")
async def lm_wednesday(message: types.Message):
    try:
        await wednesday()
        await bot.send_message(log_group,
                               f'{datetime.datetime.now()} : \n[info] —É—Å–ø–µ—à–Ω–æ –æ–ø—Ä–æ—Å–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –°–†–ï–î–ï')
        await message.bot.send_message(log_group,
                                       f'{datetime.datetime.now()} : \n[info] –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É lm_wednesday')
    except:
        await bot.send_message(log_group,
                               f'{datetime.datetime.now()} : \n[error] –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–æ—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Å—Ä–µ–¥–µ')


@dp.message_handler(commands="lm_test_b")
async def lm_test_b(message: types.Message):
    try:
        await match_business()
        await bot.send_message(log_group,
                               f'{datetime.datetime.now()} : \n[info] —É—Å–ø–µ—à–Ω–æ —Å–º—ç—Ç—á–∏–ª –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–ª–µ–π –ø–æ –±–∏–∑–Ω–µ—Å—É –≤ –ß–ï–¢–í–ï–†–ì')
        await message.bot.send_message(log_group,
                                       f'{datetime.datetime.now()} : \n[info] –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É lm_test_b')
    except:
        await bot.send_message(log_group,
                               f'{datetime.datetime.now()} : \n[error] –æ—à–∏–±–∫–∞ –ø—Ä–∏ –º—ç—Ç—á–∏–Ω–≥–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–ª–µ–π –ø–æ –±–∏–∑–Ω–µ—Å—É –≤ –ß–ï–¢–í–ï–†–ì')


@dp.message_handler(commands="lm_test_f")
async def lm_test_f(message: types.Message):
    try:
        await match_friends()
        await bot.send_message(log_group,
                               f'{datetime.datetime.now()} : \n[info] —É—Å–ø–µ—à–Ω–æ —Å–º—ç—Ç—á–∏–ª –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–ª–µ–π –ø–æ –¥—Ä—É–∂–±–µ –≤ –ß–ï–¢–í–ï–†–ì')
        await message.bot.send_message(log_group,
                                       f'{datetime.datetime.now()} : \n[info] –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É lm_test_f')
    except:
        await bot.send_message(log_group,
                               f'{datetime.datetime.now()} : \n[error] –æ—à–∏–±–∫–∞ –ø—Ä–∏ –º—ç—Ç—á–∏–Ω–≥–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–ª–µ–π –ø–æ –¥—Ä—É–∂–±–µ –≤ –ß–ï–¢–í–ï–†–ì')


@dp.message_handler(commands="lm_saturday")
async def lm_saturday(message: types.Message):
    try:
        await saturday()
        await bot.send_message(log_group, f'{datetime.datetime.now()} : \n[info] —É—Å–ø–µ—à–Ω–æ –æ–ø—Ä–æ—Å–∏–ª –≤ –°–£–ë–ë–û–¢–£')
        await message.bot.send_message(log_group,
                                       f'{datetime.datetime.now()} : \n[info] –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É lm_saturday')
    except:
        await bot.send_message(log_group, f'{datetime.datetime.now()} : \n[error] –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–æ—Å–µ –≤ –°–£–ë–ë–û–¢–£')



@dp.message_handler()
async def test(message: types.Message):
    user_id = int(message.from_user.id)
    global c
    status = lib.Query.getFieldByQuery('u_status', f'ei = {user_id}', 'status')
    if status == 'name':
        idict = {'first_name': message.text}
        lib.Query.updateRecordByQuery('u', idict, f'ei = {user_id}')
        lib.Query.deleteRecordByQuery('u_status', f'ei = {user_id};')
        await message.answer(f'–†–∞–¥ –∑–Ω–∞–∫–æ–º—Å—Ç–≤—É, {message.text}! –í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª',
                             reply_markup=get_keyboard_gender(user_id))
    elif status == 'else':
        pass

    elif status == "sendEveryone":
        ids = lib.Query.runAnyQuery(f'SELECT ei FROM `u`', 'select', s_mode='all')
        ids = [el for el, _ in groupby(ids)]
        ids.remove({'ei': user_id})
        for i in ids:
            await bot.send_message(i['ei'], message.text)
        await bot.send_message(user_id, '–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')

    elif status == "sendFriends":
        ids = lib.Query.runAnyQuery(f'SELECT ei FROM `u_`', 'select', s_mode='all')
        ids = [el for el, _ in groupby(ids)]
        ids.remove({'ei': user_id})
        for i in ids:
            await bot.send_message(i['ei'], message.text)
        await bot.send_message(user_id, '–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')

    elif status == "sendBusiness":
        ids = lib.Query.runAnyQuery(f'SELECT ei FROM `u_business`', 'select', s_mode='all')
        ids = [el for el, _ in groupby(ids)]
        ids.remove({'ei': user_id})
        for i in ids:
            await bot.send_message(i['ei'], message.text)
        await bot.send_message(user_id, '–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')

    elif status == 'help':
        block = lib.Query.getFieldByQuery('u', f'ei = {user_id}', 'blocked')
        if str(message).find("private") != -1:
            try:
                if int(block) == 0:
                    try:
                        await bot.send_message(str(c.at[0, 'chat_id']), message.text,
                                               reply_markup=get_keyboard_ban(int(message.from_user.id)))
                        await message.answer('–¢–≤–æ–π –≤–æ–ø—Ä–æ—Å –±—ã–ª —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω, –ø—Ä–æ—Å—å–±–∞ –æ–∂–∏–¥–∞—Ç—å –æ—Ç–≤–µ—Ç–∞')
                        lib.Query.deleteRecordByQuery('u_status', f'ei = {user_id};')
                    except:
                        await message.answer(
                            '[error] –ú–∞–º–∞ –º–∏—è!üò∞ –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ù–æ —è —É–∂–µ —Å–æ–æ–±—â–∏–ª —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –æ–± –æ—à–∏–±–∫–µ, —Å–∫–æ—Ä–æ –≤—Å—ë —É–ª–∞–¥–∏–º.')
                else:
                    await bot.delete_message(message.chat.id, message.message_id)
                    await message.answer(
                        '[error] –ù–µ —Ç–∞–∫ –±—ã—Å—Ç—Ä–æ! –Ø –≤–∞—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª. –ï—Å–ª–∏ –≤—ã —Å–∞–º–∏ —ç—Ç–æ–≥–æ –¥–æ–±–∏–ª–∏—Å—å, –º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç–æ–∏—Ç –æ—Å—Ç–∞–≤–∏—Ç—å –≤—Å—ë –∫–∞–∫ –µ—Å—Ç—å? –ù–æ –µ—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –±—ã–ª–∞ –º–æ—è –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ @iplakunov.')
                    await message.bot.send_message(log_group,
                                                   f'{datetime.datetime.now()} : \n[info] –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ø—ã—Ç–∞–ª—Å—è '
                                                   f'–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å, –Ω–æ –æ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω',
                                                   reply_markup=get_keyboard_unban(int(message.from_user.id)))
            except:
                await bot.send_message(log_group, f'{datetime.datetime.now()} : \n–û–®–ò–ë–ö–ê.–ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç')
    elif status == 'sity':
        idict = {'sity': message.text}
        lib.Query.updateRecordByQuery('u', idict, f'ei = {user_id}')
        lib.Query.deleteRecordByQuery('u_status', f'ei = {user_id};')
        await message.answer(f'–ó–∞–ø–æ–º–Ω–∏–ª! –°–æ –≤—Ä–µ–º–µ–Ω–µ–º —Å–º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ä–µ–±—è—Ç –Ω–∞ –æ—Ñ–ª–∞–π–Ω –≤—Å—Ç—Ä–µ—á—É –∏ –∏–∑ "{message.text}" :)' \
                             f'\n–ù–∞ –∫–∞–∫–∏—Ö —è–∑—ã–∫–∞—Ö —Ç–µ–±–µ –±—É–¥–µ—Ç —É–¥–æ–±–Ω–æ –æ–±—â–∞—Ç—å—Å—è –Ω–∞ –≤—Å—Ç—Ä–µ—á–∞—Ö? –í—ã–±–µ—Ä–∏ –≤—Å–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã',
                             reply_markup=get_keyboard_lang(user_id, 'r'))
    elif status == 'sityedit':
        idict = {'sity': message.text}
        lib.Query.updateRecordByQuery('u', idict, f'ei = {user_id}')
        # lib.Query.runAnyQuery(f"DELETE FROM u_status WHERE ei = {user_id}", "delete")
        lib.Query.deleteRecordByQuery('u_status', f'ei = {user_id};')
        if (int(lib.Query.getFieldByQuery('u', f'ei = {user_id}', 'business')) == 1) and (
                int(lib.Query.getFieldByQuery('u', f'ei = {user_id}', 'friends')) == 0):
            await finall(user_id)
        else:
            await finall_f(user_id)
        # await finall_f(user_id)
    elif status == 'deal':
        if len(message.text) > 59:
            idict = {'deal': message.text}
            lib.Query.updateRecordByQuery('u', idict, f'ei = {user_id}')
            lib.Query.deleteRecordByQuery('u_status', f'ei = {user_id};')
            await message.answer(
                f'–•–æ—Ä–æ—à–æ. –ö–∞–∫–æ–≥–æ —Ä–æ–¥–∞ –¥–µ–ª–æ–≤—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –ø–æ–ª—É—á–∞—Ç—å? –û—Ç–º–µ—Ç—å 2 –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞',
                reply_markup=get_keyboard_business_contact(user_id, 'r'))
        else:
            await message.answer(
                f'–ü—Ä–æ—Å—Ç–∏, –Ω–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ–ª–µ–µ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç–æ, —Ö–æ—Ç—è –±—ã –ø–∞—Ä—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π (–æ—Ç 60 —Å–∏–º–≤–æ–ª–æ–≤)')
    elif status == 'deal_match':
        if len(message.text) > 59:
            idict = {'deal': message.text}
            lib.Query.updateRecordByQuery('u', idict, f'ei = {user_id}')
            lib.Query.deleteRecordByQuery('u_status', f'ei = {user_id};')
            await message.answer(
                f'–•–æ—Ä–æ—à–æ. –ö–∞–∫–æ–≥–æ —Ä–æ–¥–∞ –¥–µ–ª–æ–≤—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –ø–æ–ª—É—á–∞—Ç—å? –û—Ç–º–µ—Ç—å 2 –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞',
                reply_markup=get_keyboard_business_contact(user_id, 'm'))
        else:
            await message.answer(
                f'–ü—Ä–æ—Å—Ç–∏, –Ω–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ–ª–µ–µ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç–æ, —Ö–æ—Ç—è –±—ã –ø–∞—Ä—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π (–æ—Ç 60 —Å–∏–º–≤–æ–ª–æ–≤)')
    elif status == 'editdeal':
        if len(message.text) > 59:
            idict = {'deal': message.text}
            lib.Query.updateRecordByQuery('u', idict, f'ei = {user_id}')
            lib.Query.deleteRecordByQuery('u_status', f'ei = {user_id};')
            await message.answer(f'–ó–∞–ø–æ–º–Ω–∏–ª! –ü–æ—Å–º–æ—Ç—Ä–∏, –∫–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –±—É–¥—É—â–∏—Ö –¥—Ä—É–∑–µ–π.')
            asyncio.sleep(5)
            await finall(user_id)
        else:
            await message.answer(
                f'–ü—Ä–æ—Å—Ç–∏, –Ω–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ–ª–µ–µ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç–æ, —Ö–æ—Ç—è –±—ã –ø–∞—Ä—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π (–æ—Ç 60 —Å–∏–º–≤–æ–ª–æ–≤)')
    elif status == 'free_time':
        if len(message.text) > 59:

            idict = {'free_time': message.text, 'friends': 1, 'week': 1}
            lib.Query.updateRecordByQuery('u', idict, f'ei = {user_id}')
            lib.Query.deleteRecordByQuery('u_status', f'ei = {user_id};')
            idict1 = {'ei': user_id}
            lib.Query.addRecordByQuery('u_fee', idict1)
            await message.answer(f"–ü–æ—Å–º–æ—Ç—Ä–∏, –∫–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –±—É–¥—É—â–∏—Ö –¥—Ä—É–∑–µ–π.")
            asyncio.sleep(5)
            await finall_f(user_id)
        else:
            await message.answer(
                f'–ü—Ä–æ—Å—Ç–∏, –Ω–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ–ª–µ–µ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç–æ, —Ö–æ—Ç—è –±—ã –ø–∞—Ä—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π (–æ—Ç 60 —Å–∏–º–≤–æ–ª–æ–≤)')
    elif status == 'free_time_match':
        if len(message.text) > 59:
            idict = {'free_time': message.text}
            lib.Query.updateRecordByQuery('u', idict, f'ei = {user_id}')
            lib.Query.deleteRecordByQuery('u_status', f'ei = {user_id};')
            try:
                await bot.set_my_commands(
                    commands=[
                        types.BotCommand('link', '–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç'),
                        types.BotCommand('help', '–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É'),
                        types.BotCommand('edit_fl', '–ò–∑–º–µ–Ω–∏—Ç—å –≤ –∞–Ω–∫–µ—Ç–µ –¥—Ä—É–∑—å—è —Ç–æ, —á—Ç–æ –Ω—Ä–∞–≤–∏—Ç—Å—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ'),
                        types.BotCommand('edit_flp', '–ò–∑–º–µ–Ω–∏—Ç—å –≤ –∞–Ω–∫–µ—Ç–µ –¥—Ä—É–∑—å—è —á–µ–º –ª—é–±–ª—é –∑–∞–Ω–∏–º–∞—Ç—å—Å—è'),
                        types.BotCommand('edit_fact', '–ò–∑–º–µ–Ω–∏—Ç—å –≤ –∞–Ω–∫–µ—Ç–µ –¥—Ä—É–∑—å—è —Ñ–∞–∫—Ç—ã –æ —Ä–∞–±–æ—Ç–µ'),
                        types.BotCommand('edit_deal', '–ò–∑–º–µ–Ω–∏—Ç—å –≤ –∞–Ω–∫–µ—Ç–µ –±–∏–∑–Ω–µ—Å –≤–∏–¥ —Å–≤–æ–µ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏'),
                        types.BotCommand('edit_sector', '–ò–∑–º–µ–Ω–∏—Ç—å –≤ –∞–Ω–∫–µ—Ç–µ –±–∏–∑–Ω–µ—Å —Å—Ñ–µ—Ä—ã –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏'),
                        types.BotCommand('edit_deal_fact', '–ò–∑–º–µ–Ω–∏—Ç—å –≤ –∞–Ω–∫–µ—Ç–µ –±–∏–∑–Ω–µ—Å —Å–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤ —Ä–∞–±–æ—Ç–µ'),
                        types.BotCommand('edit_contact', '–ò–∑–º–µ–Ω–∏—Ç—å –≤ –∞–Ω–∫–µ—Ç–µ –±–∏–∑–Ω–µ—Å —Ü–µ–ª—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤'),
                        types.BotCommand('edit_sector2',
                                         '–ò–∑–º–µ–Ω–∏—Ç—å –≤ –∞–Ω–∫–µ—Ç–µ –±–∏–∑–Ω–µ—Å —Å—Ñ–µ—Ä—ã, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ —Ö–æ—á–µ—à—å —Å–≤—è–∑–∞—Ç—å —Ä–∞–±–æ—Ç—É/–±–∏–∑–Ω–µ—Å'),
                        types.BotCommand('edit_bl', '–ò–∑–º–µ–Ω–∏—Ç—å –≤ –∞–Ω–∫–µ—Ç–µ –±–∏–∑–Ω–µ—Å —É–≤–ª–µ—á–µ–Ω–∏—è –≤ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è')
                    ],
                    scope=types.BotCommandScopeChat(chat_id=message.from_user.id)
                )
            except:
                await bot.send_message(log_group,
                                       f'{datetime.datetime.now()} : \n–û–®–ò–ë–ö–ê.start.–ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é')
            await message.answer(f"–û—Ç–ª–∏—á–Ω–æ! –°–µ–π—á–∞—Å –Ω–∞–π–¥—É —Ç–µ–±–µ –ø–∞—Ä—É")
            await match_friends(user_id)
        else:
            await message.answer(
                f'–ü—Ä–æ—Å—Ç–∏, –Ω–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ–ª–µ–µ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç–æ, —Ö–æ—Ç—è –±—ã –ø–∞—Ä—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π (–æ—Ç 60 —Å–∏–º–≤–æ–ª–æ–≤)')
    elif status == 'email':
        email_t = message.text
        user_t = lib.Query.getRecordByQuery('u', f'ei = {user_id}')
        lib.Query.deleteRecordByQuery('u_status', f'ei = {user_id};')
        await message.answer(
            f"–û—Ç–ª–∏—á–Ω–æ! –î–æ–∂–¥–∏—Å—å —á–µ—Ç–≤–µ—Ä–≥–∞, –∏ —è –ø–æ–¥–±–µ—Ä—É —Ç–µ–±–µ –ø–∞—Ä—É –¥–ª—è –æ–±—â–µ–Ω–∏—è. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ–ª—É—á–∏—à—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞–ø–∏—à–∏ –ø–µ—Ä–≤—ã–º –∏ –¥–æ–≥–æ–≤–æ—Ä–∏—Å—å –æ –≤—Å—Ç—Ä–µ—á–µ –∏–ª–∏ –≤–∏–¥–µ–æ—á–∞—Ç–µ.\n" \
            f"–í—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏, Let's meet –±–æ—Ç, —Ç–≤–æ–π –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –∫ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–º—É –æ–∫—Ä—É–∂–µ–Ω–∏—é.\n\n–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª:\nhttps://t.me/+bztYAcGH3DcyNzli")
        await bot.send_message(str(c.at[0, 'chat_id']),
                               f"[info] –ù–û–í–ê–Ø –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É:\n\n–ò–º—è: {user_t['first_name']}\nEmail/—Ç–µ–ª–µ—Ñ–æ–Ω: {email_t}" \
                               f"\n\n–ü—Ä–æ—Å—å–±–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å",
                               reply_markup=get_keyboard_fee_accept('r', user_id, email_t))
    
    elif status == 'email1':
        idict = {'ei': user_id, 'email': message.text, 'fee': 1}
        lib.Query.addRecordByQuery('u_fee', idict)
        # lib.Query.updateRecordByQuery('u_fee', idict, f'ei = {user_id}')
        lib.Query.deleteRecordByQuery('u_status', f'ei = {user_id};')
        await message.answer(
            f"–û—Ç–ª–∏—á–Ω–æ! –°–µ–π—á–∞—Å –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, –ø–æ—Å–ª–µ –µ–≥–æ –æ–¥–æ–±—Ä–µ–Ω–∏—è —Å–º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ç–µ–±–µ –ø–∞—Ä—É")  # ------------------------------------------------------------------------------------------------------------------ ALARM LIST
        await bot.send_message(str(c.at[0, 'chat_id']),
                               f"[info] –ù–û–í–ê–Ø –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É:\n\n–ò–º—è: {user_t['first_name']}\nEmail: {email_t}" \
                               f"\n\n–ü—Ä–æ—Å—å–±–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å",
                               reply_markup=get_keyboard_fee_accept('m', user_id, email_t))
    elif status == 'feedback':
        lib.Query.deleteRecordByQuery('u_status', f'ei = {user_id};')
        u_f = lib.Query.getRecordsByQuery('u', f'ei != 0')  # –∑–∞–±–∏—Ä–∞–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        u = pd.DataFrame(u_f)
        idx = u[pd.to_numeric(u["ei"], errors="coerce") == user_id].index
        for el in idx:
            if int(u.at[el, "friends"]) == 1:
                u_match = lib.Query.getRecordsByQuery('my_match',
                                                      f'ei != 0')  # –∑–∞–±–∏—Ä–∞–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –º–∞—Ç—á–µ–π –¥—Ä—É–∑–µ–π
                tery = 'my_match'
            elif int(u.at[el, "business"]) == 1:
                u_match = lib.Query.getRecordsByQuery('my_match_b',
                                                      f'ei != 0')  # –∑–∞–±–∏—Ä–∞–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –º–∞—Ç—á–µ–π –±–∏–∑–Ω–µ—Å
                tery = 'my_match_b'
            t_match = pd.DataFrame(u_match)
            idx1 = t_match[pd.to_numeric(t_match["ei"], errors="coerce") == user_id].index
            idx2 = t_match[pd.to_numeric(t_match["ei2"], errors="coerce") == user_id].index
            if idx1.to_list():
                for el1 in idx1.to_list():
                    # t_match.at[el, 'score1'] = act
                    idict = {'feedback1': message.text}
                    lib.Query.updateRecordByQuery(f'{tery}', idict, f'ei = {user_id}')
            if idx2.to_list():
                for el2 in idx2.to_list():
                    idict = {'feedback2': message.text}
                    lib.Query.updateRecordByQuery(f'{tery}', idict, f'ei2 = {user_id}')
        await message.answer(f"–•–æ—á–µ—à—å –µ—â–µ –≤—Å—Ç—Ä–µ—á—É?", reply_markup=get_keyboard_want(user_id))
    else:
        if str(message).find("reply_to_message") != -1 and str(message).find("private") == -1:
            tem = str(message).split('*')
            await bot.send_message(tem[1],
                                   f'–ù–∞–¥–µ—é—Å—å, –æ—Ç–≤–µ—Ç –Ω–µ –∑–∞—Å—Ç–∞–≤–∏–ª —Å–µ–±—è –¥–æ–ª–≥–æ –∂–¥–∞—Ç—å! –°–∫–æ—Ä–µ–µ —Å–º–æ—Ç—Ä–∏, —á—Ç–æ –Ω–∞–ø–∏—Å–∞–ª–∞ —Ç–µ–±–µ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∞:\n{message.text}')
            await message.answer('[info] –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é')
        else:
            await message.delete()
            await message.answer(f'–ù–∏—á–µ–≥–æ –Ω–µ –ø–æ–Ω—è–ª, –ø—Ä–æ—Å—å–±–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ–Ω—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ –º–Ω–æ–π')


async def on_startup(x):
    await bot.send_message(log_group, f'{datetime.datetime.now()} : \n[info] –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω')
    if int(datetime.datetime.weekday(datetime.datetime.today())) == 3:
        if int((datetime.datetime.now()).strftime('%H')) == 9:
            try:
                await match_business()
                await bot.send_message(log_group, f"{datetime.datetime.now()} : \n[info] —É—Å–ø–µ—à–Ω–æ —Å–º—ç—Ç—á–∏–ª –ø–æ –±–∏–∑–Ω–µ—Å—É")
            except:
                await bot.send_message(log_group, f"{datetime.datetime.now()} : \n–û–®–ò–ë–ö–ê.–≤—ã–∑–æ–≤ def match_business")
            try:
                await match_friends()
                await bot.send_message(log_group, f"{datetime.datetime.now()} : \n[info] —É—Å–ø–µ—à–Ω–æ —Å–º—ç—Ç—á–∏–ª –ø–æ –¥—Ä—É–∂–±–µ")
            except:
                await bot.send_message(log_group, f"{datetime.datetime.now()} : \n–û–®–ò–ë–ö–ê.–≤—ã–∑–æ–≤ def match_friends")
    elif int(datetime.datetime.weekday(datetime.datetime.today())) == 2:
        if int((datetime.datetime.now()).strftime('%H')) == 9:
            try:
                await wednesday()
                await bot.send_message(log_group, f"{datetime.datetime.now()} : \n[info] —É—Å–ø–µ—à–Ω–æ –æ–ø—Ä–æ—Å–∏–ª –≤ —Å—Ä–µ–¥—É")
            except:
                await bot.send_message(log_group, f"{datetime.datetime.now()} : \n–û–®–ò–ë–ö–ê.–≤—ã–∑–æ–≤ def wednesday")
    elif int(datetime.datetime.weekday(datetime.datetime.today())) == 5:
        if int((datetime.datetime.now()).strftime('%H')) == 9:
            try:
                await saturday()
                await bot.send_message(log_group, f"{datetime.datetime.now()} : \n[info] —É—Å–ø–µ—à–Ω–æ –æ–ø—Ä–æ—Å–∏–ª –≤ —Å—É–±–±–æ—Ç—É")
            except:
                await bot.send_message(log_group, f"{datetime.datetime.now()} : \n–û–®–ò–ë–ö–ê.–≤—ã–∑–æ–≤ def saturday")


# –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=False,
                           on_startup=on_startup)  # skip_updates - –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –æ—Ñ–ª–∞–π–Ω
